<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>52hertz</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-16T03:19:03.348Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>52hertz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo本地博客转移</title>
    <link href="http://yoursite.com/2019/11/16/hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/11/16/hexo本地博客转移/</id>
    <published>2019-11-16T03:07:54.000Z</published>
    <updated>2019-11-16T03:19:03.348Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-复制配置文件"><a href="#1-复制配置文件" class="headerlink" title="1. 复制配置文件"></a>1. 复制配置文件</h4><p>将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_config.yml备份即可。</p><p><img src="/2019/11/16/hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/1.png" alt="1"></p><h4 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h4><p>sudo apt-get install nodejs<br>sudo apt-get install npm</p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h4><p>sudo npm install -g hexo</p><h4 id="4-新建文件夹，cd进入"><a href="#4-新建文件夹，cd进入" class="headerlink" title="4.新建文件夹，cd进入"></a>4.新建文件夹，cd进入</h4><p>hexo init<br>使用hexo s查看是否能使用。</p><h4 id="5-将备份的文件覆盖到现在的文件夹"><a href="#5-将备份的文件覆盖到现在的文件夹" class="headerlink" title="5.将备份的文件覆盖到现在的文件夹"></a>5.将备份的文件覆盖到现在的文件夹</h4><p>现在使用hexo s查看是否已经成功。</p><p>此时，所有工作已经完成。</p><h3 id="最安全的hexo多台电脑同步博客解决方案–非新建分支"><a href="#最安全的hexo多台电脑同步博客解决方案–非新建分支" class="headerlink" title="最安全的hexo多台电脑同步博客解决方案–非新建分支"></a>最安全的hexo多台电脑同步博客解决方案–非新建分支</h3><p>我们经常有这样一个需求场景：需要在多台电脑间完成 Hexo 博客的撰写和发布，这就涉及到如何多台电脑同步博客的问题。</p><p><strong>我最近也遇到了这个问题，网上看了很多方案。目前网上大部分 hexo 多电脑同步博客方案都是新建一个开源分支去存放博客源文件，但是你会发现，这样做的话很多第三插件配置的appid、app_key等密钥信息也暴露在了公开的仓库里，存在一定的数据安全隐患。</strong></p><p><strong>那有没有什么办法不暴露这些信息呢？对了，用一个私有仓库来存放博客源文件不就结了嘛。虽然 Github 的私有仓库是收费的，但是我的博客是同时部署在 Github 和 Coding 的，而 Coding 是可以新建私有仓库的。Nice，完美解决。</strong></p><p>当我准备写遍博客来分享（xuan yao）想到的这个解决方案时，最后还是荣幸的发现一遍文章已经分享了这个方案，只是在搜索引擎中不太好搜出来。本着“不重复造轮子的原则”，笔者就不重写了，而且他已经写的很好了。但是有几个问题需要特别注意一下：</p><ol><li><p>该文中删除主题的 .git 配置，如果你有多个主题文件夹的话，需要都删除(如 NexT 主题)。然后删除的命令那位笔者不小心写错了，应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ./themes/next/.git/</span><br></pre></td></tr></table></figure><p>用这条命令来删除你对应主题文件夹里的.git 文件夹，注意 .git 是一个隐藏文件夹。</p></li><li><p><code>.gitignore</code> 文件夹在 Hexo 的根目录下可能已经存在了，可以打开和该文中的忽略事项比对一下，如果一样，接着 <code>git init</code> 初始化 git 仓库就好；如果没有该 <code>.gitignore</code> 文件夹就新建一个添加相应忽略事项再 <code>git init</code> 初始化。</p></li><li><p><strong>这点需要特别注意，否则可能导致迁移失败：</strong><br>虽然我们第 1 步中删除了主题的 .git 配置，第 2 步中Hexo项目根目录的 <code>.gitignore</code> 文件也并没有忽略掉 <code>theme</code> 这个文件夹。<strong>但是！！</strong> NexT 主题的文件夹原来是用 git 来管理的，里面还有一个 <code>.gitignore</code> 文件，把 <code>themes/next/source/lib</code> 目录下的很多文件给忽略掉了。</p><p>这就导致了你上传到私有仓库时，你以为你把 <code>themes</code> 文件下的所有内容都上传到仓库了，但其实 “偷偷”的把 <code>themes/next/source/lib</code> 目录下的很多必要的文件也忽略掉了，并没有上传。然后在新电脑上拉下来的时候，<code>hexo g</code>、<code>hexo s</code> 一预览，你会奇怪的发现：<strong>所有的 FontAwesome 相关的图标都不见了，其他的功能一切正常。</strong></p><p><strong>正确的做法是</strong>：在新机器上把私有仓库上的博客源文件 clone 下来后，因为还缺点原来的文件，所以应该去原来机器上 <code>themes/next/source/lib</code> 目录下，把整个 lib 目录下的文件全部复制粘贴到新机器对应的 <code>themes/next/source/lib</code> 目录下，这样就能正常生成站点文件了。</p><blockquote><p>注意：同理，如果你的 <code>themes</code> 目录下有多个主题配置文件的话，可以查看是否有 <code>.gitignore</code> 文件，用 git 上传私有仓库时是否也忽略了一些必要资源，如果有再新电脑上对应复制过来就 OK 了。</p></blockquote><p>关于这个问题的详情，可以看这：<a href="https://github.com/theme-next/hexo-theme-next/issues/564#issuecomment-451385682" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next/issues/564#issuecomment-451385682</a></p></li><li><p>在新电脑上 <code>npm install</code> 下载 hexo 所需的环境的时候，要切到 hexo 的根目录下，再执行 <code>npm install</code>。</p></li><li><p>当你在新电脑用 <code>npm install</code> 下载依赖的第三插件时，由于 node 的版本、众多第三方插件、跨平台等原因，可能有的插件会存在兼容性问题，导致下载不下来，笔者想迁移到 Mac 上就遇到兼容性问题了，<code>fsevent</code> 插件目前不支持 node v11+ 版本，而刚配置新电脑的 node 环境时，默认安装的是最新版的 node，需要降低 node 的版本才能下载成功。</p><p><a href="https://www.alankeene.com/2019/0102/fsevents-didnot-soppurt-node11.html" target="_blank" rel="noopener">node 11 无法安装 fsevents 插件的解决方案</a></p><p>至于如何降低 node 的版本，其实你不用删除，有一个叫 <code>nvm</code> （Node Version Manager）的工具，专门用来管理多个版本的 node 环境的，你可以下载多个版本的 node 存在你的机器中，用 <code>nvm</code> 的命令行就可以实现不同版本 node 环境的随意切换，非常方便。</p><p><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">这是 nvm 的 github 地址</a></p></li><li><p>好，当你在新的电脑上写完博客，本地预览也没问题，准备用 hexo d 部署到 Github 和 Coding 上前，别忘了把新电脑的 SSH 公钥配置到 Github 和 Coding 上。</p><p>然后用 hexo d部署时，由于在新机器上，SSH 密钥和之前的不一样，第一次尝试连接 Github 主机时会提示：<br><code>The authenticity of host &#39;github.com&#39; can&#39;t be established.</code><br><code>Are you sure you want continue connecting?</code></p><p>输入 yes 就好，同理 coding 仓库也会提示，同样输入yes。至此，新电脑上写完的博客也成功同步更新到 Github 和 Coding 的仓库上了。</p><p>更新完博客后，记得 用 git push 将新电脑上改动的博客源文件也 push 到私有仓库中，实现博客源文件的同步更新。</p></li><li><p>当你在另一台电脑上准备开始写博客前，记得把远程私有仓库的最新博客源文件拉到本地，<strong>但记得不要用 <code>git pull</code> 的方式</strong>，用如下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将远程 git 仓库上最新的内容拉取到本地，将本地库所关联的远程库更新至最新</span><br><span class="line">git fetch --all</span><br><span class="line">//强制将本地库的内容指向最新远程仓库的master分支   </span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure></li></ol><p>最后附上该篇博客的地址：</p><ul><li><a href="https://ricky.moe/2017/01/13/hexo-perfect-synchronize/" target="_blank" rel="noopener">最完美的Hexo多电脑同步方法</a></li></ul><p>从此，你就可以在多台电脑间愉快地同步更新博客啦～<br>若到一台新的电脑上，只要把博客源码 clone 下来，配置好新机器的 <code>node</code>、<code>hexo</code>、<code>git</code> 环境，随时可以发车～</p><p><strong><code>2019.1.8 最新更新：</code> 好消息是：Github 从 2019.1.8 日起可以免费使用私有仓库了，那大家也可以选择把博客源文件传到 Github 私有仓库上，维护起来更加方便了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-复制配置文件&quot;&gt;&lt;a href=&quot;#1-复制配置文件&quot; class=&quot;headerlink&quot; title=&quot;1. 复制配置文件&quot;&gt;&lt;/a&gt;1. 复制配置文件&lt;/h4&gt;&lt;p&gt;将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_conf
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux安装包的区别</title>
    <link href="http://yoursite.com/2019/11/16/linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/11/16/linux安装包的区别/</id>
    <published>2019-11-16T03:00:01.000Z</published>
    <updated>2019-11-16T03:05:31.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="deb、rpm、tar-gz三种Linux软件包的区别"><a href="#deb、rpm、tar-gz三种Linux软件包的区别" class="headerlink" title="deb、rpm、tar.gz三种Linux软件包的区别"></a>deb、rpm、tar.gz三种Linux软件包的区别</h4><p>接解LINUX的，同样都是for linux，但rpm、tar.gz、deb包还是有很大区别的，</p><p>这种区别可使安装过程进行不下去。那我们应该下载什么格式的包呢？</p><p>**rpm包-在红帽LINUX、SUSE、Fedora可以直接进行安装，但在Ubuntu中却无法识别；</p><p>deb包-是Ubuntu的专利，在Ubuntu中双击deb包就可以进入自动安装进程；</p><p> tar.gz包-在所有的Linux版本中都能使用，但安装过程也最麻烦。 </p><p>​     要先解压缩，然后在“终端”里用cd命令进入刚才解压的目录，再找到安装链接文件安装。</p><p>   比如tar.gz包解压到了“/temp/*****.tar.gz/”，tar.gz包中的安装链接文件为install：</p><p>​     1- cd/temp/*****.tar.gz/</p><p>​     2- ./install</p><p>​     3- 根据提示输入“ENTER”或“安装目录”</p><p>​     4- 结束</p><h4 id="tar-gz和-zip文件的区别"><a href="#tar-gz和-zip文件的区别" class="headerlink" title=".tar.gz和.zip文件的区别"></a>.tar.gz和.zip文件的区别</h4><p>在一开始下载数据集的时候遇到的疑惑</p><p>他们的不同点在于：</p><p>1 .tar.gz文件一般用于Linux系统上，而.zip文件一般流行于Windows系统上</p><p>2 .tar.gz格式的文件比.zip文件要小很多</p><p>虽然这两种格式的文件有许多不同，但他们都是压缩文件，且文件里包含的内容相同，在windows系统中WinRar等工具同样可以解压缩tar.gz格式的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;deb、rpm、tar-gz三种Linux软件包的区别&quot;&gt;&lt;a href=&quot;#deb、rpm、tar-gz三种Linux软件包的区别&quot; class=&quot;headerlink&quot; title=&quot;deb、rpm、tar.gz三种Linux软件包的区别&quot;&gt;&lt;/a&gt;deb、r
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu如何卸载软件</title>
    <link href="http://yoursite.com/2019/11/16/ubuntu%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/11/16/ubuntu如何卸载软件/</id>
    <published>2019-11-16T02:27:01.000Z</published>
    <updated>2019-11-16T02:53:59.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-使用Synaptic软件包管理器进行卸载"><a href="#1-使用Synaptic软件包管理器进行卸载" class="headerlink" title="1.使用Synaptic软件包管理器进行卸载"></a>1.使用Synaptic软件包管理器进行卸载</h4><p>打开软件包管理器。Ubuntu自带了一个GUI（Graphical User Interface，图形化用户界面）软件包管理器，它可 以让你在一个可视化窗口中卸载程序。如果你不习惯使用命令行，这一工具将非常有用。</p><p>点击系统，然后选择管理。在管理菜单中，选择Synaptic软件包管理器。<br>如果你使用Unity，可以打开dashboard并搜索“Synaptic”</p><p> 某些较新版本的Ubuntu没有预装Synaptic。要安装它，打开终端并输入：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><h4 id="2-使用软件中心进行卸载"><a href="#2-使用软件中心进行卸载" class="headerlink" title="2.使用软件中心进行卸载"></a>2.使用软件中心进行卸载</h4><p> 打开软件中心。软件中心是一个可以安装和卸载Linux软件的GUI软件包管理器。在较旧版本的Ubuntu上，软件中心位于应用程序菜单内。在较近期的版本中，你可以再Launcher内找到软件中心，或者在Dash搜索栏中搜索“software”。 2 打开已安装的软件。在左边窗格内，点击已安装软件链接。这将打开所有已安装在你的系统上的软件列表。 3 卸载程序。选中需要卸载的程序并点击工具栏上的移除按钮。你可能会被要求输入管理员密码。输入密码后，程序将被自动移除。    你可以选择多个程序把它们添加到移除队列，然后点击移除按钮。当第一个程序完成卸载后，将开始对队列中下一个程序进行卸载。 </p><p>注：纯复制，因为基本不用</p><h4 id="3-使用终端进行卸载"><a href="#3-使用终端进行卸载" class="headerlink" title="3.使用终端进行卸载"></a>3.使用终端进行卸载</h4><p> 1.打开一个终端，输入<code>dpkg --list</code> ,按下Enter键，终端输出以下内容，显示的是你电脑上安装的所有软件。  </p><p> 2.在终端中找到你需要卸载的软件的名称，列表是按照首字母排序的。  </p><p>3.在终端上输入命令sudo apt-get –purge remove 包名（–purge是可选项，写上这个属性是将软件及其配置文件一并删除，如不需要删除配置文件，可执行sudo apt-get remove 包名） ，此处我要删除的是polipo ，那么在终端输入sudo apt-get –purge remove polipo，按下回车，输入密码，再次回车。 </p><p> 4.执行过程中，会提示你是否真的要删除（继续执行删除命令），在终端输入<code>y</code> ，然后回车，删除程序继续执行。  </p><p> 5.正常情况下，再次出现输入命令行删除成功。</p><h4 id="4-卸载源代码编译的的软件："><a href="#4-卸载源代码编译的的软件：" class="headerlink" title="4.卸载源代码编译的的软件："></a>4.卸载源代码编译的的软件：</h4><p>cd 源代码目录<br>make clean<br>./configure<br>（make）<br>make uninstall<br>rm -rf 目录</p><h4 id="5-清理系统："><a href="#5-清理系统：" class="headerlink" title="5.清理系统："></a>5.<strong>清理系统：</strong></h4><p>sudo apt-get autoclean<br>sudo apt-get clean<br>sudo apt-get autoremove<br>（或使用ubuntu-tweak清理）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-使用Synaptic软件包管理器进行卸载&quot;&gt;&lt;a href=&quot;#1-使用Synaptic软件包管理器进行卸载&quot; class=&quot;headerlink&quot; title=&quot;1.使用Synaptic软件包管理器进行卸载&quot;&gt;&lt;/a&gt;1.使用Synaptic软件包管理器进行
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用文字替换网页链接</title>
    <link href="http://yoursite.com/2019/11/15/%E7%94%A8%E6%96%87%E5%AD%97%E6%9B%BF%E6%8D%A2%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/11/15/用文字替换网页链接/</id>
    <published>2019-11-15T10:58:26.000Z</published>
    <updated>2019-11-15T11:01:18.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站"><a href="#怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站" class="headerlink" title="怎么把一个网址链接转换成文字的形式， 就是点一下那段文字就进入该网站"></a>怎么把一个网址链接转换成文字的形式， 就是点一下那段文字就进入该网站</h3><p>何把一个网址链接转换成文字的形式，点击一下那个文字，就可以进入该网站了？</p><p>我今天上午试做了，现在跟有需求但不会操作的朋友们分享一下：<br>我是在MarkDown编辑器上完成的，先打开MarkDown编辑器，然后按照下面的程序编写就是了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a  href =&quot;完整的地址链接&quot;&gt;代替的文字 &lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站&quot;&gt;&lt;a href=&quot;#怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站&quot; class=&quot;headerlink&quot; title=&quot;怎么把一个网址链接转换成文字的形式， 就是点一下
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装程序的三种方法</title>
    <link href="http://yoursite.com/2019/11/15/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/15/Ubuntu下安装程序的三种方法/</id>
    <published>2019-11-15T09:48:06.000Z</published>
    <updated>2019-11-16T02:55:57.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UBUNTU下安装程序的三种方法"><a href="#UBUNTU下安装程序的三种方法" class="headerlink" title="UBUNTU下安装程序的三种方法"></a>UBUNTU下安装程序的三种方法</h3><p>在ubuntu当中，安装应用程序我所知道的有三种方法，分别是apt-get，dpkg安装deb和make install安装源码包三种。下面针对每一种方法各举例来说明。</p><h4 id="1-apt-get方法"><a href="#1-apt-get方法" class="headerlink" title="(1)apt-get方法"></a>(1)apt-get方法</h4><p>使用apt-get install来安装应用程序算是最常见的一种安装方法了，比如我要安装build-essential这个软件，使用以下，他会帮我把所有的依赖包都一起安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install 软件名</span><br></pre></td></tr></table></figure><p>执行上述命令以后，我们可以看到一下信息，The following extra packages will be installed:表示所有需要再安装的依赖包。</p><p>下面给出apt-get的的各种参数：</p><p>apt-get install xxx 安装xxx  。如果带有参数，那么-d 表示仅下载 ，-f 表示强制安装<br>apt-get remove xxx 卸载xxx<br>apt-get update 更新软件信息数据库<br>apt-get upgrade 进行系统升级<br>apt-cache search 搜索软件包<br>Tips：建议您经常使用“apt-get update”命令来更新您的软件信息数据库 </p><p>apt-get理论上是要求能够联网，但是如果制作了本地源，就不需要联网，制作本地源可以参考：<a href="http://www.cnblogs.com/xwdreamer/p/3875857.html" target="_blank" rel="noopener">ubuntu制作本地源</a></p><h4 id="2-dpkg安装deb包"><a href="#2-dpkg安装deb包" class="headerlink" title="(2)dpkg安装deb包"></a>(2)dpkg安装deb包</h4><p>Ubuntu软件包格式为deb，安装方法如下：</p><p>  sudo dpkg -i package.deb</p><p>dpkg的详细使用方法，网上有很多，下面简单列了几个：</p><p>dpkg -i package.deb安装包</p><p>dpkg -r package删除包</p><p>dpkg -P package删除包（包括配置文件）</p><p>dpkg -L package列出与该包关联的文件</p><p>dpkg -l package显示该包的版本</p><p>dpkg –unpack package.deb解开 deb 包的内容</p><p>dpkg -S keyword搜索所属的包内容</p><p>dpkg -l列出当前已安装的包</p><p>dpkg -c package.deb列出 deb 包的内容</p><p>dpkg –configure package配置包</p><h4 id="make-install源代码安装"><a href="#make-install源代码安装" class="headerlink" title="make install源代码安装"></a>make install源代码安装</h4><p>如果要使用make安装的话，那么必须得安装build-essential这个依赖包，安装方法已经在前面说过了。在安装完毕以后，我们就可以进行源码安装。源码安装大致可以分为三步骤：（./configure）–＞ 编译（sudo make） –＞ 安装（sudo make install）。</p><ol><li>配置：这是编译源代码的第一步，通过 <code>./configure</code> 命令完成。执行此步以便为编译源代码作准备。常用的选项有 <code>--</code>prefix=PREFIX，用以指定程序的安装位置。更多的选项可通过 <code>--</code>help 查询。也有某些程序无需执行此步。</li><li>编译：一旦配置通过，可即刻使用 <code>make</code> 指令来执行源代码的编译过程。视软件的具体情况而定，编译所需的时间也各有差异，我们所要做的就是耐心等候和静观其变。此步虽然仅下简单的指令，但有时候所遇到的问题却十分复杂。较常碰到的情形是程序编译到中途却无法圆满结束。此时，需要根据出错提示分析以便找到应对之策。</li><li>安装：如果编译没有问题，那么执行 <code>sudo make install</code> 就可以将程序安装到系统中了。</li></ol><p>下面以安装nagios为例进行说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1.解压缩</span><br><span class="line">tar -zxf nagios-4.0.2.tar.gz  </span><br><span class="line">//2.进入目录</span><br><span class="line">cd nagios-4.0.2</span><br><span class="line">//3.配置</span><br><span class="line">./configure --prefix=/usr/local/nagios     </span><br><span class="line">//4.编译</span><br><span class="line">make all</span><br><span class="line">//5.安装</span><br><span class="line">make install &amp;&amp; make install-init &amp;&amp; make install-commandmode &amp;&amp; make install-config</span><br></pre></td></tr></table></figure><h3 id="ubuntu制作本地源"><a href="#ubuntu制作本地源" class="headerlink" title="ubuntu制作本地源"></a>ubuntu制作本地源</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>平时apt-get install安装软件时，下载的deb文件都会存放在/var/cache/apt/archives/下，为了今后重装或给别人用，特别是没有网络时，这些deb文件实际上是可以派上用途的，也就是可以用这些deb制作成本地源。这种方法还有一个应用场景：</p><ol><li>先在有网络的服务器上面进行apt-get install安装</li><li>然后制作本地源</li><li>将本地源拷贝到没有网络的服务器上，然后在那台机器上设定sourcelist指向这个本地源，此时在那台没有网络的服务器上也可以执行apt-get install安装了。</li></ol><p>下面给出可行且实用的部分本地源制作步骤：</p><p>一、在自己的根目录下建立一个目录，用于放所有下载的软件包，目录名随自己喜欢,建议新手在自己的根目录下进行以下操作，以避免操作权限问题的困扰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/ packs</span><br></pre></td></tr></table></figure><p>拷贝过来发现在packs当中为文件都是root账户的，需要修改</p><p>修改所有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R enadmin.enadmin *</span><br></pre></td></tr></table></figure><p> 修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod ug+rw,o+r *</span><br></pre></td></tr></table></figure><p>二、复制文件到packs文件夹下，目录依各人情况变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /var/cache/apt/archives/* ~/packs -r</span><br></pre></td></tr></table></figure><p>三、建立Packages.gz包，里面记录了packs文件夹下面的软件包信息，包括依赖信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-scanpackages packs /dev/null |gzip &gt; packs/Packages.gz -r</span><br></pre></td></tr></table></figure><p> 完成此操作后，将packs文件夹复制到一个不常格式化的分区中，作为长久使用，比如我将它放在一个fat32的分区时面，路径是 /media/packs</p><p>四、加本地源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb file:///media/ packs/</span><br></pre></td></tr></table></figure><p>注意packs后面有一个斜杠，前面还要有空格</p><p>五、更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UBUNTU下安装程序的三种方法&quot;&gt;&lt;a href=&quot;#UBUNTU下安装程序的三种方法&quot; class=&quot;headerlink&quot; title=&quot;UBUNTU下安装程序的三种方法&quot;&gt;&lt;/a&gt;UBUNTU下安装程序的三种方法&lt;/h3&gt;&lt;p&gt;在ubuntu当中，安装应用
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配</title>
    <link href="http://yoursite.com/2019/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2019/11/12/字符串匹配/</id>
    <published>2019-11-12T06:01:58.000Z</published>
    <updated>2019-11-12T06:01:58.058Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://yoursite.com/2019/11/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/12/线段树/</id>
    <published>2019-11-12T06:01:46.000Z</published>
    <updated>2019-11-12T06:01:46.511Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数论</title>
    <link href="http://yoursite.com/2019/11/12/%E6%95%B0%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/11/12/数论/</id>
    <published>2019-11-12T06:00:26.000Z</published>
    <updated>2019-11-12T06:00:26.654Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="http://yoursite.com/2019/11/12/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/11/12/拓扑排序/</id>
    <published>2019-11-12T06:00:13.000Z</published>
    <updated>2019-11-12T06:00:13.893Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://yoursite.com/2019/11/12/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/11/12/并查集/</id>
    <published>2019-11-12T05:58:56.000Z</published>
    <updated>2019-11-12T05:58:56.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>单源最短路径问题</title>
    <link href="http://yoursite.com/2019/11/12/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/12/单源最短路径问题/</id>
    <published>2019-11-12T05:58:37.000Z</published>
    <updated>2019-11-12T05:58:37.936Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://yoursite.com/2019/11/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/12/最小生成树/</id>
    <published>2019-11-12T05:58:10.000Z</published>
    <updated>2019-11-12T05:58:10.413Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>优先队列</title>
    <link href="http://yoursite.com/2019/11/12/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/11/12/优先队列/</id>
    <published>2019-11-12T05:57:53.000Z</published>
    <updated>2019-11-12T05:57:53.580Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://yoursite.com/2019/11/12/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/12/二叉搜索树/</id>
    <published>2019-11-12T05:57:40.000Z</published>
    <updated>2019-11-12T05:57:40.049Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DFS+BFS</title>
    <link href="http://yoursite.com/2019/11/12/DFS-BFS/"/>
    <id>http://yoursite.com/2019/11/12/DFS-BFS/</id>
    <published>2019-11-12T05:57:00.000Z</published>
    <updated>2019-11-12T05:57:00.527Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://yoursite.com/2019/11/12/%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/11/12/图/</id>
    <published>2019-11-12T05:56:29.000Z</published>
    <updated>2019-11-12T05:56:29.032Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="http://yoursite.com/2019/11/12/%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/12/树/</id>
    <published>2019-11-12T05:54:31.000Z</published>
    <updated>2019-11-12T05:54:31.183Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>动态规划DP</title>
    <link href="http://yoursite.com/2019/11/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92DP/"/>
    <id>http://yoursite.com/2019/11/12/动态规划DP/</id>
    <published>2019-11-12T05:54:09.000Z</published>
    <updated>2019-11-12T05:54:09.877Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>二分搜索，哈希</title>
    <link href="http://yoursite.com/2019/11/12/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%93%88%E5%B8%8C/"/>
    <id>http://yoursite.com/2019/11/12/二分搜索，哈希/</id>
    <published>2019-11-12T05:53:25.000Z</published>
    <updated>2019-11-12T05:53:25.636Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c++ STL库函数</title>
    <link href="http://yoursite.com/2019/11/12/c-STL%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/12/c-STL库函数/</id>
    <published>2019-11-12T05:52:30.000Z</published>
    <updated>2019-11-12T05:52:30.223Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
