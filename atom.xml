<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>52hertz</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-18T07:49:46.173Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>52hertz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机场拥堵模型分析</title>
    <link href="http://yoursite.com/2019/12/18/%E6%9C%BA%E5%9C%BA%E6%8B%A5%E5%A0%B5%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/12/18/机场拥堵模型分析/</id>
    <published>2019-12-18T07:17:02.000Z</published>
    <updated>2019-12-18T07:49:46.173Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一．程序说明"><a href="#一．程序说明" class="headerlink" title="一．程序说明"></a><strong>一．程序说明</strong></h4><p>本文主要通过成都双流机场数据，建立了不确定性多阶段决策模型和拥堵型，验证了客流符合泊松分布，运用排队论理论设计了机场乘车改进。最后建立拥堵模型和定义乘车效率，然后在相同的时间段，以乘客的累计等待时间来判断是否为拥堵。</p><p><strong>1.</strong> <strong>泊松过程和排队论结合分析旅客累计等待时间的理论依据</strong></p><p>排队系统由输入过程与到达规则、排队规则、服务机构的结构、服务时间与服务规划组成。<br>   一般还假设到达间隔时间序列与服务时间均为独立同分布随机变量序列，且这两个序列也相互独立。<br>   评价一个排队系统的好坏要以顾客与服务机构两方面的利益为标准。就顾客来说总希望等待时间或逗留时间越短越好，从而希望服务台个数尽可能多些但是，就服务机构来说，增加服务台数，就意味着增加投资，增加多了会造成浪费，增加少了要引起顾客的抱怨甚至失去顾客，增加多少比较好呢？顾客与服务机构为了照顾自己的利益对排队系统中的3个指标：队长、等待时间、服务台的忙期（简称忙期）都很关心。因此这3个指标也就成了排队论的主要研究内容。</p><h5 id="2-．泊松分布模型"><a href="#2-．泊松分布模型" class="headerlink" title="2**．泊松分布模型**"></a><strong>2**</strong>．泊松分布模型**</h5><p>更一般地来说，一个泊松过程是在每个有界的时间区间或在某个空间（例如：一个欧几里得平面或三维的欧几里得空间）中的每一个有界的区域，赋予一个随机的事件数，使得在一个时间区间或空间区域内的事件数，和另一个互斥（不重叠）的时间区间或空间区域内的事件数，这两个随机变数是独立的。在每一个时间区间或空间区域内的事件数是一个随机变数，遵循泊松分布。（技术上而言，更精确地来说，每一个具有有限测度的集合，都被赋予一个泊松分布的随机变数。）</p><p>在不相重叠的时间区间内乘客的到达数是相互独立的 对充分小的，在吋间区间内有每一个乘客到达的概率与无关。 对充分小的，在时间区间内有两个或者两个以上乘客到达的概率极小，满足泊松过程的要求。</p><h5 id="3-排队论"><a href="#3-排队论" class="headerlink" title="3.**排队论**"></a><strong>3.**</strong>排队论**</h5><p>排队论(Queuing Theory) ，是研究系统随机聚散现象和随机服务系统工作过程的数学理论和方法，又称随机服务系统理论，为运筹学的一个分支。</p><p>日常生活中存在大量有形和无形的排队或拥挤现象，如旅客购票排队，市内电话占线等现象。排队论的基本思想是1909年丹麦数学家、科学家，工程师A.K.埃尔朗在解决自动电话设计问题时开始形成的，当时称为话务理论。他在热力学统计平衡理论的启发下，成功地建立了电话统计平衡模型，并由此得到一组递推状态方程，从而导出著名的埃尔朗电话损失率公式。</p><p>排队论(queuing theory), 或称随机服务系统理论， 是通过对服务对象到来及服务时间的统计研究，得出这些数量指标（等待时间、排队长度、忙期长短等）的统计规律，然后根据这些规律来改进服务系统的结构或重新组织被服务对象，使得服务系统既能满足服务对象的需要，又能使机构的费用最经济或某些指标最优。它是数学运筹学的分支学科，也是研究服务系统中排队现象随机规律的学科。广泛应用于计算机网络, 生产, 运输, 库存等各项资源共享的随机服务系统。 排队论研究的内容有3个方面：统计推断，根据资料建立模型；系统的性态，即和排队有关的数量指标的概率规律性；系统的优化问题。其目的是正确设计和有效运行各个服务系统，使之发挥最佳效益。</p><h5 id="4-排队模型的表示"><a href="#4-排队模型的表示" class="headerlink" title="4.**排队模型的表示**"></a><strong>4.**</strong>排队模型的表示**</h5><p> (1)、X/Y/Z/A/B/C<br> X—顾客相继到达的间隔时间的分布；<br> Y—服务时间的分布；<br> M—负指数分布、D—确定型、Ek —k阶爱尔兰分布；<br> Z—服务台个数；<br> A—系统容量限制（默认为∞）；<br> B—顾客源数目（默认为∞）；<br> C—服务规则 （默认为先到先服务FCFS)。<br> (2）、排队系统的衡量指标<br> 服务队长Ls—服务中的顾客数；<br> 排队长Lq—队列中的顾客数；<br> 总队长L=Ls+Lq 系统中的顾客总数；<br> 逗留时间Ws—顾客在服务中的等待时间；<br> 等待时间Wq—顾客在队列中的等待时间；<br> 总时间W=Ws+Wq 顾客在系统中的总停留时间；<br> 忙期—服务机构两次空闲的时间间隔；<br> 服务强度ρ；<br> 稳态—系统运行充分长时间后，初始状态的影响基本消失，系统状态不再随时间变化。<br> (3)、到达间隔时间与服务时间的分布<br> 泊松分布；<br> 负指数分布；<br> 爱尔兰分布；<br> 统计数据的分布判断。</p><h5 id="5-优化改进思路"><a href="#5-优化改进思路" class="headerlink" title="5.**优化改进思路**"></a><strong>5.**</strong>优化改进思路**</h5><p>（1）加入更多的影响因素，以使得决策模型更加贴近实际。</p><p>（2）泊松分布模型与排队论模型加入限制条件，使得减少其与实际产生的误差。</p><p>（3）带入实际数据来队其进行验证，优化模型的算法，使其计算方便，并贴近实际情况 </p><h4 id="二-运行界面展示"><a href="#二-运行界面展示" class="headerlink" title="二.**  运行界面展示"></a>二.**  <strong>运行界面展示</strong></h4><p>​                      <strong>自己去跑代码</strong></p><h4 id="二-源程序代码"><a href="#二-源程序代码" class="headerlink" title="二. 源程序代码"></a><strong>二.</strong> <strong>源程序代码</strong></h4><ol><li><h5 id="处理旅客信息"><a href="#处理旅客信息" class="headerlink" title="处理旅客信息"></a><strong>处理旅客信息</strong></h5></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=pd.read_excel(<span class="string">'cd.xlsx'</span>)</span><br><span class="line">print(data)</span><br><span class="line">data=data.sort_values(by=<span class="string">'抵达时间'</span>,axis=<span class="number">0</span>,ascending=<span class="literal">True</span>)</span><br><span class="line">val=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">24</span>)]</span><br><span class="line">t=data.iloc[:,<span class="number">3</span>].values</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    a,b=i.split(<span class="string">':'</span>)</span><br><span class="line">    b=int(b)</span><br><span class="line">    a=int(a)</span><br><span class="line">    na=copy.deepcopy(a)</span><br><span class="line">    nb=copy.deepcopy(b)</span><br><span class="line">    m = <span class="number">20</span></span><br><span class="line">    s = np.random.exponential(<span class="number">1</span>/m, size=<span class="number">150</span>)</span><br><span class="line">    ss=<span class="number">0</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    print(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        ss=ss+i</span><br><span class="line">        count=count+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ss&gt;=<span class="number">1</span>:</span><br><span class="line">            ss=<span class="number">0</span></span><br><span class="line">            val[na][nb]+=int(count)</span><br><span class="line">            nb=nb+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nb//<span class="number">60</span>&gt;=<span class="number">1</span>:</span><br><span class="line">                nb=nb%<span class="number">60</span></span><br><span class="line">                na=na+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> na==<span class="number">24</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">        val[i][j]=int(val[i][j]*<span class="number">0.46</span>)</span><br><span class="line">        print(val[i][j])</span><br><span class="line">v = []</span><br><span class="line">f = open(<span class="string">'C:\\people.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    join = val[i]</span><br><span class="line">    v.append(join)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">        strNum = str(join[j])</span><br><span class="line">        f.write(strNum)</span><br><span class="line">        <span class="keyword">if</span> j!=<span class="number">59</span>:</span><br><span class="line">            f.write(<span class="string">' '</span>)</span><br><span class="line">    f.write(<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h5 id="2-计算旅客的累计等待时间"><a href="#2-计算旅客的累计等待时间" class="headerlink" title="2.计算旅客的累计等待时间**"></a>2.计算旅客的累计等待时间**</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> hour=<span class="number">24</span>,minute=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="built_in">deque</span>&lt;P&gt; q,b;</span><br><span class="line"><span class="keyword">int</span> ans[hour][minute];</span><br><span class="line"><span class="keyword">int</span> power=<span class="number">15</span>,s;  <span class="comment">//运载能力</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    freopen(<span class="string">"C:\\people.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hour;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;minute;j++)&#123;</span><br><span class="line">            ans[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s) q.push_back(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">            <span class="keyword">int</span> t=power;</span><br><span class="line">            <span class="keyword">while</span>(q.size()&amp;&amp;t)&#123;</span><br><span class="line">                P p=q.front();</span><br><span class="line">                q.pop_front();</span><br><span class="line">                <span class="keyword">int</span> x=p.first,y=p.second;</span><br><span class="line">                <span class="keyword">if</span>(t&lt;x)&#123;</span><br><span class="line">                    x-=t;</span><br><span class="line">                    q.push_front(&#123;x,y&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;t-=x;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!b.empty())</span><br><span class="line">                b.pop_front();</span><br><span class="line">            <span class="keyword">int</span> f_sum=<span class="number">0</span>,s_sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">                P p=q.front();</span><br><span class="line">                p.second++;</span><br><span class="line">                f_sum+=p.first;</span><br><span class="line">                s_sum+=p.second;</span><br><span class="line">                b.push_back(p);</span><br><span class="line">                q.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i][j]=s_sum;</span><br><span class="line">            <span class="keyword">while</span>(!b.empty()) q.push_back(b.front()),b.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    freopen(<span class="string">"C:\\time.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hour;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;minute;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-将结果汇智成统计图"><a href="#3-将结果汇智成统计图" class="headerlink" title="3.将结果汇智成统计图**"></a>3.将结果汇智成统计图**</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(&#123;<span class="string">'figure.figsize'</span>:(<span class="number">10</span>,<span class="number">5</span> )&#125;)</span><br><span class="line">f=open(<span class="string">'C:\\time.txt'</span>)</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    line=line.strip(<span class="string">'\n'</span>).split(<span class="string">' '</span>)</span><br><span class="line">    a=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> line:</span><br><span class="line">        a.append(int(i))</span><br><span class="line">    l.append(a)</span><br><span class="line">index=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">    index.append(i)</span><br><span class="line">val_h=l[<span class="number">11</span>]  <span class="comment">#修改想要输出的区间是哪一小时</span></span><br><span class="line">p=plt.bar(x=index,height=val_h,color=<span class="string">'blue'</span>)</span><br><span class="line">plt.savefig(<span class="string">'result.png'</span>)</span><br></pre></td></tr></table></figure><h5 id="4-爬取携程的航班信息"><a href="#4-爬取携程的航班信息" class="headerlink" title="4.爬取携程的航班信息"></a>4.爬取携程的航班信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">table = []</span><br><span class="line"></span><br><span class="line">city = &#123;<span class="string">'阿尔山'</span>: <span class="string">'YIE'</span>, <span class="string">'阿克苏'</span>: <span class="string">'AKU'</span>, <span class="string">'阿拉善右旗'</span>: <span class="string">'RHT'</span>, <span class="string">'阿拉善左旗'</span>: <span class="string">'AXF'</span>, <span class="string">'阿勒泰'</span>: <span class="string">'AAT'</span>, <span class="string">'阿里'</span>: <span class="string">'NGQ'</span>, <span class="string">'澳门'</span>: <span class="string">'MFM'</span>,</span><br><span class="line">        <span class="string">'安庆'</span>: <span class="string">'AQG'</span>, <span class="string">'安顺'</span>: <span class="string">'AVA'</span>, <span class="string">'鞍山'</span>: <span class="string">'AOG'</span>, <span class="string">'巴彦淖尔'</span>: <span class="string">'RLK'</span>, <span class="string">'百色'</span>: <span class="string">'AEB'</span>, <span class="string">'包头'</span>: <span class="string">'BAV'</span>, <span class="string">'保山'</span>: <span class="string">'BSD'</span>, <span class="string">'北海'</span>: <span class="string">'BHY'</span>,</span><br><span class="line">        <span class="string">'北京'</span>: <span class="string">'BJS'</span>, <span class="string">'白城'</span>: <span class="string">'DBC'</span>, <span class="string">'白山'</span>: <span class="string">'NBS'</span>, <span class="string">'毕节'</span>: <span class="string">'BFJ'</span>, <span class="string">'博乐'</span>: <span class="string">'BPL'</span>, <span class="string">'重庆'</span>: <span class="string">'CKG'</span>, <span class="string">'昌都'</span>: <span class="string">'BPX'</span>, <span class="string">'常德'</span>: <span class="string">'CGD'</span>,</span><br><span class="line">        <span class="string">'常州'</span>: <span class="string">'CZX'</span>, <span class="string">'朝阳'</span>: <span class="string">'CHG'</span>, <span class="string">'成都'</span>: <span class="string">'CTU'</span>, <span class="string">'池州'</span>: <span class="string">'JUH'</span>, <span class="string">'赤峰'</span>: <span class="string">'CIF'</span>, <span class="string">'揭阳'</span>: <span class="string">'SWA'</span>, <span class="string">'长春'</span>: <span class="string">'CGQ'</span>, <span class="string">'长沙'</span>: <span class="string">'CSX'</span>,</span><br><span class="line">        <span class="string">'长治'</span>: <span class="string">'CIH'</span>, <span class="string">'承德'</span>: <span class="string">'CDE'</span>, <span class="string">'沧源'</span>: <span class="string">'CWJ'</span>, <span class="string">'达县'</span>: <span class="string">'DAX'</span>, <span class="string">'大理'</span>: <span class="string">'DLU'</span>, <span class="string">'大连'</span>: <span class="string">'DLC'</span>, <span class="string">'大庆'</span>: <span class="string">'DQA'</span>, <span class="string">'大同'</span>: <span class="string">'DAT'</span>,</span><br><span class="line">        <span class="string">'丹东'</span>: <span class="string">'DDG'</span>, <span class="string">'稻城'</span>: <span class="string">'DCY'</span>, <span class="string">'东营'</span>: <span class="string">'DOY'</span>, <span class="string">'敦煌'</span>: <span class="string">'DNH'</span>, <span class="string">'芒市'</span>: <span class="string">'LUM'</span>, <span class="string">'额济纳旗'</span>: <span class="string">'EJN'</span>, <span class="string">'鄂尔多斯'</span>: <span class="string">'DSN'</span>, <span class="string">'恩施'</span>: <span class="string">'ENH'</span>,</span><br><span class="line">        <span class="string">'二连浩特'</span>: <span class="string">'ERL'</span>, <span class="string">'佛山'</span>: <span class="string">'FUO'</span>, <span class="string">'福州'</span>: <span class="string">'FOC'</span>, <span class="string">'抚远'</span>: <span class="string">'FYJ'</span>, <span class="string">'阜阳'</span>: <span class="string">'FUG'</span>, <span class="string">'赣州'</span>: <span class="string">'KOW'</span>, <span class="string">'格尔木'</span>: <span class="string">'GOQ'</span>, <span class="string">'固原'</span>: <span class="string">'GYU'</span>,</span><br><span class="line">        <span class="string">'广元'</span>: <span class="string">'GYS'</span>, <span class="string">'广州'</span>: <span class="string">'CAN'</span>, <span class="string">'贵阳'</span>: <span class="string">'KWE'</span>, <span class="string">'桂林'</span>: <span class="string">'KWL'</span>, <span class="string">'哈尔滨'</span>: <span class="string">'HRB'</span>, <span class="string">'哈密'</span>: <span class="string">'HMI'</span>, <span class="string">'海口'</span>: <span class="string">'HAK'</span>, <span class="string">'海拉尔'</span>: <span class="string">'HLD'</span>,</span><br><span class="line">        <span class="string">'邯郸'</span>: <span class="string">'HDG'</span>, <span class="string">'汉中'</span>: <span class="string">'HZG'</span>, <span class="string">'杭州'</span>: <span class="string">'HGH'</span>, <span class="string">'合肥'</span>: <span class="string">'HFE'</span>, <span class="string">'和田'</span>: <span class="string">'HTN'</span>, <span class="string">'黑河'</span>: <span class="string">'HEK'</span>, <span class="string">'呼和浩特'</span>: <span class="string">'HET'</span>, <span class="string">'淮安'</span>: <span class="string">'HIA'</span>,</span><br><span class="line">        <span class="string">'怀化'</span>: <span class="string">'HJJ'</span>, <span class="string">'黄山'</span>: <span class="string">'TXN'</span>, <span class="string">'惠州'</span>: <span class="string">'HUZ'</span>, <span class="string">'鸡西'</span>: <span class="string">'JXA'</span>, <span class="string">'济南'</span>: <span class="string">'TNA'</span>, <span class="string">'济宁'</span>: <span class="string">'JNG'</span>, <span class="string">'加格达奇'</span>: <span class="string">'JGD'</span>, <span class="string">'佳木斯'</span>: <span class="string">'JMU'</span>,</span><br><span class="line">        <span class="string">'嘉峪关'</span>: <span class="string">'JGN'</span>, <span class="string">'金昌'</span>: <span class="string">'JIC'</span>, <span class="string">'金门'</span>: <span class="string">'KNH'</span>, <span class="string">'锦州'</span>: <span class="string">'JNZ'</span>, <span class="string">'嘉义'</span>: <span class="string">'CYI'</span>, <span class="string">'西双版纳'</span>: <span class="string">'JHG'</span>, <span class="string">'建三江'</span>: <span class="string">'JSJ'</span>, <span class="string">'晋江'</span>: <span class="string">'JJN'</span>,</span><br><span class="line">        <span class="string">'井冈山'</span>: <span class="string">'JGS'</span>, <span class="string">'景德镇'</span>: <span class="string">'JDZ'</span>, <span class="string">'九江'</span>: <span class="string">'JIU'</span>, <span class="string">'九寨沟'</span>: <span class="string">'JZH'</span>, <span class="string">'喀什'</span>: <span class="string">'KHG'</span>, <span class="string">'凯里'</span>: <span class="string">'KJH'</span>, <span class="string">'康定'</span>: <span class="string">'KGT'</span>, <span class="string">'克拉玛依'</span>: <span class="string">'KRY'</span>,</span><br><span class="line">        <span class="string">'库车'</span>: <span class="string">'KCA'</span>, <span class="string">'库尔勒'</span>: <span class="string">'KRL'</span>, <span class="string">'昆明'</span>: <span class="string">'KMG'</span>, <span class="string">'拉萨'</span>: <span class="string">'LXA'</span>, <span class="string">'兰州'</span>: <span class="string">'LHW'</span>, <span class="string">'黎平'</span>: <span class="string">'HZH'</span>, <span class="string">'丽江'</span>: <span class="string">'LJG'</span>, <span class="string">'荔波'</span>: <span class="string">'LLB'</span>,</span><br><span class="line">        <span class="string">'连云港'</span>: <span class="string">'LYG'</span>, <span class="string">'六盘水'</span>: <span class="string">'LPF'</span>, <span class="string">'临汾'</span>: <span class="string">'LFQ'</span>, <span class="string">'林芝'</span>: <span class="string">'LZY'</span>, <span class="string">'临沧'</span>: <span class="string">'LNJ'</span>, <span class="string">'临沂'</span>: <span class="string">'LYI'</span>, <span class="string">'柳州'</span>: <span class="string">'LZH'</span>, <span class="string">'泸州'</span>: <span class="string">'LZO'</span>,</span><br><span class="line">        <span class="string">'洛阳'</span>: <span class="string">'LYA'</span>, <span class="string">'吕梁'</span>: <span class="string">'LLV'</span>, <span class="string">'澜沧'</span>: <span class="string">'JMJ'</span>, <span class="string">'龙岩'</span>: <span class="string">'LCX'</span>, <span class="string">'满洲里'</span>: <span class="string">'NZH'</span>, <span class="string">'梅州'</span>: <span class="string">'MXZ'</span>, <span class="string">'绵阳'</span>: <span class="string">'MIG'</span>, <span class="string">'漠河'</span>: <span class="string">'OHE'</span>,</span><br><span class="line">        <span class="string">'牡丹江'</span>: <span class="string">'MDG'</span>, <span class="string">'马祖'</span>: <span class="string">'MFK'</span>, <span class="string">'南昌'</span>: <span class="string">'KHN'</span>, <span class="string">'南充'</span>: <span class="string">'NAO'</span>, <span class="string">'南京'</span>: <span class="string">'NKG'</span>, <span class="string">'南宁'</span>: <span class="string">'NNG'</span>, <span class="string">'南通'</span>: <span class="string">'NTG'</span>, <span class="string">'南阳'</span>: <span class="string">'NNY'</span>,</span><br><span class="line">        <span class="string">'宁波'</span>: <span class="string">'NGB'</span>, <span class="string">'宁蒗'</span>: <span class="string">'NLH'</span>, <span class="string">'攀枝花'</span>: <span class="string">'PZI'</span>, <span class="string">'普洱'</span>: <span class="string">'SYM'</span>, <span class="string">'齐齐哈尔'</span>: <span class="string">'NDG'</span>, <span class="string">'黔江'</span>: <span class="string">'JIQ'</span>, <span class="string">'且末'</span>: <span class="string">'IQM'</span>, <span class="string">'秦皇岛'</span>: <span class="string">'BPE'</span>,</span><br><span class="line">        <span class="string">'青岛'</span>: <span class="string">'TAO'</span>, <span class="string">'庆阳'</span>: <span class="string">'IQN'</span>, <span class="string">'衢州'</span>: <span class="string">'JUZ'</span>, <span class="string">'日喀则'</span>: <span class="string">'RKZ'</span>, <span class="string">'日照'</span>: <span class="string">'RIZ'</span>, <span class="string">'三亚'</span>: <span class="string">'SYX'</span>, <span class="string">'厦门'</span>: <span class="string">'XMN'</span>, <span class="string">'上海'</span>: <span class="string">'SHA'</span>,</span><br><span class="line">        <span class="string">'深圳'</span>: <span class="string">'SZX'</span>, <span class="string">'神农架'</span>: <span class="string">'HPG'</span>, <span class="string">'沈阳'</span>: <span class="string">'SHE'</span>, <span class="string">'石家庄'</span>: <span class="string">'SJW'</span>, <span class="string">'塔城'</span>: <span class="string">'TCG'</span>, <span class="string">'台州'</span>: <span class="string">'HYN'</span>, <span class="string">'太原'</span>: <span class="string">'TYN'</span>, <span class="string">'扬州'</span>: <span class="string">'YTY'</span>,</span><br><span class="line">        <span class="string">'唐山'</span>: <span class="string">'TVS'</span>, <span class="string">'腾冲'</span>: <span class="string">'TCZ'</span>, <span class="string">'天津'</span>: <span class="string">'TSN'</span>, <span class="string">'天水'</span>: <span class="string">'THQ'</span>, <span class="string">'通辽'</span>: <span class="string">'TGO'</span>, <span class="string">'铜仁'</span>: <span class="string">'TEN'</span>, <span class="string">'吐鲁番'</span>: <span class="string">'TLQ'</span>, <span class="string">'万州'</span>: <span class="string">'WXN'</span>,</span><br><span class="line">        <span class="string">'威海'</span>: <span class="string">'WEH'</span>, <span class="string">'潍坊'</span>: <span class="string">'WEF'</span>, <span class="string">'温州'</span>: <span class="string">'WNZ'</span>, <span class="string">'文山'</span>: <span class="string">'WNH'</span>, <span class="string">'乌海'</span>: <span class="string">'WUA'</span>, <span class="string">'乌兰浩特'</span>: <span class="string">'HLH'</span>, <span class="string">'乌鲁木齐'</span>: <span class="string">'URC'</span>, <span class="string">'无锡'</span>: <span class="string">'WUX'</span>,</span><br><span class="line">        <span class="string">'梧州'</span>: <span class="string">'WUZ'</span>, <span class="string">'武汉'</span>: <span class="string">'WUH'</span>, <span class="string">'武夷山'</span>: <span class="string">'WUS'</span>, <span class="string">'西安'</span>: <span class="string">'SIA'</span>, <span class="string">'西昌'</span>: <span class="string">'XIC'</span>, <span class="string">'西宁'</span>: <span class="string">'XNN'</span>, <span class="string">'锡林浩特'</span>: <span class="string">'XIL'</span>,</span><br><span class="line">        <span class="string">'香格里拉(迪庆)'</span>: <span class="string">'DIG'</span>,</span><br><span class="line">        <span class="string">'襄阳'</span>: <span class="string">'XFN'</span>, <span class="string">'兴义'</span>: <span class="string">'ACX'</span>, <span class="string">'徐州'</span>: <span class="string">'XUZ'</span>, <span class="string">'香港'</span>: <span class="string">'HKG'</span>, <span class="string">'烟台'</span>: <span class="string">'YNT'</span>, <span class="string">'延安'</span>: <span class="string">'ENY'</span>, <span class="string">'延吉'</span>: <span class="string">'YNJ'</span>, <span class="string">'盐城'</span>: <span class="string">'YNZ'</span>,</span><br><span class="line">        <span class="string">'伊春'</span>: <span class="string">'LDS'</span>,</span><br><span class="line">        <span class="string">'伊宁'</span>: <span class="string">'YIN'</span>, <span class="string">'宜宾'</span>: <span class="string">'YBP'</span>, <span class="string">'宜昌'</span>: <span class="string">'YIH'</span>, <span class="string">'宜春'</span>: <span class="string">'YIC'</span>, <span class="string">'义乌'</span>: <span class="string">'YIW'</span>, <span class="string">'银川'</span>: <span class="string">'INC'</span>, <span class="string">'永州'</span>: <span class="string">'LLF'</span>, <span class="string">'榆林'</span>: <span class="string">'UYN'</span>,</span><br><span class="line">        <span class="string">'玉树'</span>: <span class="string">'YUS'</span>,</span><br><span class="line">        <span class="string">'运城'</span>: <span class="string">'YCU'</span>, <span class="string">'湛江'</span>: <span class="string">'ZHA'</span>, <span class="string">'张家界'</span>: <span class="string">'DYG'</span>, <span class="string">'张家口'</span>: <span class="string">'ZQZ'</span>, <span class="string">'张掖'</span>: <span class="string">'YZY'</span>, <span class="string">'昭通'</span>: <span class="string">'ZAT'</span>, <span class="string">'郑州'</span>: <span class="string">'CGO'</span>, <span class="string">'中卫'</span>: <span class="string">'ZHY'</span>,</span><br><span class="line">        <span class="string">'舟山'</span>: <span class="string">'HSN'</span>,</span><br><span class="line">        <span class="string">'珠海'</span>: <span class="string">'ZUH'</span>, <span class="string">'遵义(茅台)'</span>: <span class="string">'WMT'</span>, <span class="string">'遵义(新舟)'</span>: <span class="string">'ZYI'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flight</span><span class="params">(dcity, acity, date)</span>:</span></span><br><span class="line">    date = date[<span class="number">0</span>:<span class="number">4</span>] + <span class="string">'-'</span> + date[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">'-'</span> + date[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla / 5.0(WindowsNT10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 78.0.3904.70Safari / 537.36"</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,  <span class="comment"># 声明文本类型为 json 格式,</span></span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'__DAYU_PP=fbffA7JMjfFQYEJvq3yV285fa84ef3bb; _abtest_userid=14f10ca5-5fe5-4b90-8994-a9a2a8289725; _ga=GA1.2.1823657567.1547218198; _RSG=jB4_phNRhw9fNvhoLy8_29; _RDG=28f1ebd8af073928c800c3c3726b485bce; _RGUID=9eab6d7a-f3fc-42ed-90bf-23c572af95e9; _geoinfo=CN%26%e6%b7%b1%e5%9c%b3; _bfa=1.1547218195619.296wjo.1.1547625090247.1554179025352.5.60; _bfs=1.1; Hm_lvt_cdce8cda34e84469b1c8015204129522=1554179026; Hm_lpvt_cdce8cda34e84469b1c8015204129522=1554179026; gad_city=31f35a60e938dff697ddea628b5bea7c; _RF1=14.153.237.134; Session=SmartLinkCode=U155952&amp;SmartLinkKeyWord=&amp;SmartLinkQuary=&amp;SmartLinkHost=&amp;SmartLinkLanguage=zh; _gid=GA1.2.1875696831.1554179028; _gat=1; Mkt_UnionRecord=%5B%7B%22aid%22%3A%224897%22%2C%22timestamp%22%3A1554179028552%7D%5D; _jzqco=%7C%7C%7C%7C1547625095764%7C1.1997966906.1547218199380.1547636825575.1554179028593.1547636825575.1554179028593.0.0.0.59.59; __zpspc=9.5.1554179028.1554179028.1%232%7Csp0.baidu.com%7C%7C%7C%25E6%2590%25BA%25E7%25A8%258B%7C%23; MKT_Pagesource=PC; Union=OUID=index&amp;AllianceID=4897&amp;SID=155952&amp;SourceID=&amp;Expires=1554783828996; MKT_OrderClick=ASID=4897155952&amp;CT=1554179029004&amp;CURL=https%3A%2F%2Fwww.ctrip.com%2F%3Fsid%3D155952%26allianceid%3D4897%26ouid%3Dindex&amp;VAL=&#123;"pc_vid":"1547218195619.296wjo"&#125;; _bfi=p1%3D100101991%26p2%3D100101991%26v1%3D60%26v2%3D59'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://flights.ctrip.com/itinerary/api/12808/products'</span></span><br><span class="line">    request_payload = &#123;<span class="string">"flightWay"</span>: <span class="string">"Oneway"</span>,</span><br><span class="line">                       <span class="string">"army"</span>: <span class="string">"false"</span>,</span><br><span class="line">                       <span class="string">"classType"</span>: <span class="string">"ALL"</span>,</span><br><span class="line">                       <span class="string">"hasChild"</span>: <span class="string">'false'</span>,</span><br><span class="line">                       <span class="string">"hasBaby"</span>: <span class="string">'false'</span>,</span><br><span class="line">                       <span class="string">"searchIndex"</span>: <span class="number">1</span>,</span><br><span class="line">                       <span class="string">"portingToken"</span>: <span class="string">"3fec6a5a249a44faba1f245e61e2af88"</span>,</span><br><span class="line">                       <span class="string">"airportParams"</span>: [</span><br><span class="line">                           &#123;<span class="string">"dcity"</span>: city.get(dcity), <span class="string">"acity"</span>: city.get(acity), <span class="string">"dcityname"</span>: dcity, <span class="string">"acityname"</span>: acity,</span><br><span class="line">                            <span class="string">"date"</span>: date&#125;]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里传进去的参数必须为 json 格式</span></span><br><span class="line">    response = requests.post(url, data=json.dumps(request_payload), headers=headers).text</span><br><span class="line">    routeList = json.loads(response)[<span class="string">"data"</span>].get(<span class="string">'routeList'</span>)</span><br><span class="line">    <span class="comment"># print("123",routeList)</span></span><br><span class="line">    <span class="keyword">for</span> route <span class="keyword">in</span> routeList:</span><br><span class="line">        <span class="keyword">if</span> len(route.get(<span class="string">'legs'</span>)) == <span class="number">1</span>:</span><br><span class="line">            info = []</span><br><span class="line">            legs = route.get(<span class="string">'legs'</span>)[<span class="number">0</span>]</span><br><span class="line">            flight = legs.get(<span class="string">'flight'</span>)</span><br><span class="line">            info.append(flight.get(<span class="string">'airlineName'</span>))</span><br><span class="line">            info.append(flight.get(<span class="string">'flightNumber'</span>))</span><br><span class="line">            info.append(flight.get(<span class="string">'departureDate'</span>)[<span class="number">-8</span>:<span class="number">-3</span>])</span><br><span class="line">            info.append(flight.get(<span class="string">'arrivalDate'</span>)[<span class="number">-8</span>:<span class="number">-3</span>])</span><br><span class="line">            info.append(flight.get(<span class="string">'punctualityRate'</span>))</span><br><span class="line">            info.append(legs.get(<span class="string">'characteristic'</span>).get(<span class="string">'lowestPrice'</span>))</span><br><span class="line">            print(info)</span><br><span class="line">            table.append(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dcity = <span class="string">'北京'</span></span><br><span class="line">    acity = <span class="string">'成都'</span></span><br><span class="line">    date = <span class="string">'20190916'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> city.keys():</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> i != acity:</span><br><span class="line">                flight(i, acity, date)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">#xiecheng('北京','成都','20190916')</span></span><br><span class="line">    df = pd.DataFrame(table)</span><br><span class="line">    df.to_excel(<span class="string">'C:\\cd.xlsx'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一．程序说明&quot;&gt;&lt;a href=&quot;#一．程序说明&quot; class=&quot;headerlink&quot; title=&quot;一．程序说明&quot;&gt;&lt;/a&gt;&lt;strong&gt;一．程序说明&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;本文主要通过成都双流机场数据，建立了不确定性多阶段决策模型和拥堵型，验证了
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode第167场周赛题解</title>
    <link href="http://yoursite.com/2019/12/15/Leetcode%E7%AC%AC167%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/15/Leetcode第167场周赛题解/</id>
    <published>2019-12-15T05:03:05.000Z</published>
    <updated>2019-12-15T05:27:42.921Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h4><p><a href="https://leetcode-cn.com/contest/weekly-contest-167/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-167/</a></p><h4 id="5283-二进制链表转整数"><a href="#5283-二进制链表转整数" class="headerlink" title="5283.二进制链表转整数"></a>5283.二进制链表转整数</h4><p>给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。</p><p>请你返回该链表所表示数字的 十进制值 。</p><p>示例 1：</p><p><img src="/2019/12/15/Leetcode%E7%AC%AC167%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,0,1]</span><br><span class="line">输出：5</span><br><span class="line">解释：二进制数 (101) 转化为十进制数 (5)</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]</span><br><span class="line">输出：18880</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [0,0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>提示：</p><p>链表不为空。<br>链表的结点总数不超过 30。<br>每个结点的值不是 0 就是 1。</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>把链表节点的值压入栈中，每次取出栈顶元素进行进制转化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDecimalValue</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        ListNode* p=head-&gt;next;</span><br><span class="line">        s.push(head-&gt;val);</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            s.push(p-&gt;val);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">int</span> l=s.size();</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123; </span><br><span class="line">            sum=sum+s.top()*<span class="built_in">pow</span>(<span class="number">2</span>,i);</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5124-顺次数"><a href="#5124-顺次数" class="headerlink" title="5124.顺次数"></a>5124.顺次数</h4><p>我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 1 的整数。</p><p>请你返回由 [low, high] 范围内所有顺次数组成的 有序 列表（从小到大排序）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：low = 100, high = 300</span><br><span class="line">输出：[123,234]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：low = 1000, high = 13000</span><br><span class="line">输出：[1234,2345,3456,4567,5678,6789,12345]</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 &lt;= low &lt;= high &lt;= 10^9</span><br></pre></td></tr></table></figure><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p><strong>穷举大法好！！！！！！！</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequentialDigits(<span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t = &#123;</span><br><span class="line">            <span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">67</span>, <span class="number">78</span>, <span class="number">89</span>,</span><br><span class="line">            <span class="number">123</span>, <span class="number">234</span>, <span class="number">345</span>, <span class="number">456</span>, <span class="number">567</span>, <span class="number">678</span>, <span class="number">789</span>,</span><br><span class="line">            <span class="number">1234</span>, <span class="number">2345</span>, <span class="number">3456</span>, <span class="number">4567</span>, <span class="number">5678</span>, <span class="number">6789</span>,</span><br><span class="line">            <span class="number">12345</span>, <span class="number">23456</span>, <span class="number">34567</span>, <span class="number">45678</span>, <span class="number">56789</span>,</span><br><span class="line">            <span class="number">123456</span>, <span class="number">234567</span>, <span class="number">345678</span>, <span class="number">456789</span>,</span><br><span class="line">            <span class="number">1234567</span>, <span class="number">2345678</span>, <span class="number">3456789</span>,</span><br><span class="line">            <span class="number">12345678</span>, <span class="number">23456789</span>,</span><br><span class="line">            <span class="number">123456789</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = t.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a &lt; t.size() &amp;&amp; t[a] &lt; low)</span><br><span class="line">            a++;</span><br><span class="line">        <span class="keyword">while</span>(b &gt;=<span class="number">0</span> &amp;&amp; t[b] &gt; high)</span><br><span class="line">            b--;</span><br><span class="line">        <span class="keyword">if</span>(a &lt;= b)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(t.begin() + a, t.begin() + b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>**   加油 奥利给！！！！**</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-16
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/categories/acm/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode第166场周赛题解</title>
    <link href="http://yoursite.com/2019/12/08/Leetcode%E7%AC%AC166%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/08/Leetcode第166场周赛题解/</id>
    <published>2019-12-08T07:12:22.000Z</published>
    <updated>2019-12-08T08:19:29.574Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h4><p><a href="https://leetcode-cn.com/contest/weekly-contest-166/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-166/</a></p><h4 id="5279-整数的各位积和之差"><a href="#5279-整数的各位积和之差" class="headerlink" title="5279.整数的各位积和之差"></a>5279.整数的各位积和之差</h4><p>给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 234</span><br><span class="line">输出：15 </span><br><span class="line">解释：</span><br><span class="line">各位数之积 = 2 * 3 * 4 = 24 </span><br><span class="line">各位数之和 = 2 + 3 + 4 = 9 </span><br><span class="line">结果 = 24 - 9 = 15</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4421</span><br><span class="line">输出：21</span><br><span class="line">解释： </span><br><span class="line">各位数之积 = 4 * 4 * 2 * 1 = 32 </span><br><span class="line">各位数之和 = 4 + 4 + 2 + 1 = 11 </span><br><span class="line">结果 = 32 - 11 = 21</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= n &lt;= 10^5</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subtractProductAndSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">        <span class="keyword">int</span> sum,a,b;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            v.push_back(n%<span class="number">10</span>);</span><br><span class="line">            n=n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">            sum+=v[i];</span><br><span class="line">            a*=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=a-sum;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5280-用户分组"><a href="#5280-用户分组" class="headerlink" title="5280.用户分组"></a>5280.用户分组</h4><p>有 n 位用户参加活动，他们的 ID 从 0 到 n - 1，每位用户都 恰好 属于某一用户组。给你一个长度为 n 的数组 groupSizes，其中包含每位用户所处的用户组的大小，请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。</p><p>你可以任何顺序返回解决方案，ID 的顺序也不受限制。此外，题目给出的数据保证至少存在一种解决方案。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：groupSizes = [3,3,3,3,3,1,3]</span><br><span class="line">输出：[[5],[0,1,2],[3,4,6]]</span><br></pre></td></tr></table></figure><p>解释：<br>其他可能的解决方案有 [[2,1,6],[5],[0,4,3]] 和 [[5],[0,6,2],[4,3,1]]。<br>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：groupSizes = [2,1,3,3,3,2]</span><br><span class="line">输出：[[1],[0,5],[2,3,4]]</span><br></pre></td></tr></table></figure><p>提示：</p><p>groupSizes.length == n<br>1 &lt;= n &lt;= 500<br>1 &lt;= groupSizes[i] &lt;= n</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>用户所在分组人数是固定的，使用map维护当前组的人对应放到哪个位置，如果组在map中不存在或者组员满了，就新加一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; groupThePeople(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; groupSizes) &#123;</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; um;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; groupSizes.size(); ++i) &#123;</span><br><span class="line">            <span class="comment">//1.只有一个数字  比较到结束.2.相同的数字的个数比groupsize[i]大，分为多个组.</span></span><br><span class="line">            <span class="keyword">if</span> (um.find(groupSizes[i]) == um.end() || res[um[groupSizes[i]]].size() &gt;= groupSizes[i]) &#123;</span><br><span class="line">                um[groupSizes[i]] = res.size();</span><br><span class="line">                res.push_back(&#123;i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (res[um[groupSizes[i]]].size() &lt; groupSizes[i]) &#123;</span><br><span class="line">                res[um[groupSizes[i]]].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5281-使结果不超过阀值的最小除数"><a href="#5281-使结果不超过阀值的最小除数" class="headerlink" title="5281.使结果不超过阀值的最小除数"></a>5281.使结果不超过阀值的最小除数</h4><p>给你一个整数数组 nums 和一个正整数 threshold  ，你需要选择一个正整数作为除数，然后将数组里每个数都除以它，并对除法结果求和。</p><p>请你找出能够使上述结果小于等于阈值 threshold 的除数中 最小 的那个。</p><p>每个数除以除数后都向上取整，比方说 7/3 = 3 ， 10/2 = 5 。</p><p>题目保证一定有解。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,5,9], threshold = 6</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p>解释：如果除数为 1 ，我们可以得到和为 17 （1+2+5+9）。<br>如果除数为 4 ，我们可以得到和为 7 (1+1+2+3) 。如果除数为 5 ，和为 5 (1+1+1+2)。<br>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,5,7,11], threshold = 11</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [19], threshold = 5</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= nums.length &lt;= 5 * 10^4<br>1 &lt;= nums[i] &lt;= 10^6<br>nums.length &lt;= threshold &lt;= 10^6</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>  <strong>c++    二分查找</strong></p><p>注意相等情况下不要提前返回，而是继续找最小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">smallestDivisor</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>, m, res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; n: nums) &#123;</span><br><span class="line">            r = max(r, n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>&amp; n: nums) temp += (n + m - <span class="number">1</span>) / m;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; threshold) &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">                res = min(res, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-16
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/categories/acm/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode第165场周赛题解</title>
    <link href="http://yoursite.com/2019/12/01/Leetcode%E7%AC%AC165%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/01/Leetcode第165场周赛题解/</id>
    <published>2019-12-01T06:24:04.000Z</published>
    <updated>2019-12-01T06:41:25.144Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h4><p><a href="https://leetcode-cn.com/contest/weekly-contest-165/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-165/</a></p><h4 id="5275-找出井字棋的获胜者"><a href="#5275-找出井字棋的获胜者" class="headerlink" title="5275. 找出井字棋的获胜者"></a>5275. 找出井字棋的获胜者</h4><p>A 和 B 在一个 3 x 3 的网格上玩井字棋。</p><p>井字棋游戏的规则如下：</p><p>玩家轮流将棋子放在空方格 (“ “) 上。<br>第一个玩家 A 总是用 “X” 作为棋子，而第二个玩家 B 总是用 “O” 作为棋子。<br>“X” 和 “O” 只能放在空方格中，而不能放在已经被占用的方格上。<br>只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。<br>如果所有方块都放满棋子（不为空），游戏也会结束。<br>游戏结束后，棋子无法再进行任何移动。<br>给你一个数组 moves，其中每个元素是大小为 2 的另一个数组（元素分别对应网格的行和列），它按照 A 和 B 的行动顺序（先 A 后 B）记录了两人各自的棋子位置。</p><p>如果游戏存在获胜者（A 或 B），就返回该游戏的获胜者；如果游戏以平局结束，则返回 “Draw”；如果仍会有行动（游戏未结束），则返回 “Pending”。</p><p>你可以假设 moves 都 有效（遵循井字棋规则），网格最初是空的，A 将先行动。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]</span><br><span class="line">输出：&quot;A&quot;</span><br><span class="line">解释：&quot;A&quot; 获胜，他总是先走。</span><br><span class="line">&quot;X  &quot;    &quot;X  &quot;    &quot;X  &quot;    &quot;X  &quot;    &quot;X  &quot;</span><br><span class="line">&quot;   &quot; -&gt; &quot;   &quot; -&gt; &quot; X &quot; -&gt; &quot; X &quot; -&gt; &quot; X &quot;</span><br><span class="line">&quot;   &quot;    &quot;O  &quot;    &quot;O  &quot;    &quot;OO &quot;    &quot;OOX&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]</span><br><span class="line">输出：&quot;B&quot;</span><br><span class="line">解释：&quot;B&quot; 获胜。</span><br><span class="line">&quot;X  &quot;    &quot;X  &quot;    &quot;XX &quot;    &quot;XXO&quot;    &quot;XXO&quot;    &quot;XXO&quot;</span><br><span class="line">&quot;   &quot; -&gt; &quot; O &quot; -&gt; &quot; O &quot; -&gt; &quot; O &quot; -&gt; &quot;XO &quot; -&gt; &quot;XO &quot; </span><br><span class="line">&quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;   &quot;    &quot;O  &quot;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]</span><br><span class="line">输出：&quot;Draw&quot;</span><br><span class="line">输出：由于没有办法再行动，游戏以平局结束。</span><br><span class="line">&quot;XXO&quot;</span><br><span class="line">&quot;OOX&quot;</span><br><span class="line">&quot;XOX&quot;</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[0,0],[1,1]]</span><br><span class="line">输出：&quot;Pending&quot;</span><br><span class="line">解释：游戏还没有结束。</span><br><span class="line">&quot;X  &quot;</span><br><span class="line">&quot; O &quot;</span><br><span class="line">&quot;   &quot;</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= moves.length &lt;= 9<br>moves[i].length == 2<br>0 &lt;= moves[i][j] &lt;= 2<br>moves 里没有重复的元素。<br>moves 遵循井字棋的规则。</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>​     <strong>暴力出奇迹</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">tictactoe</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; moves)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;vv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v(<span class="number">3</span>);</span><br><span class="line">            vv.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;moves.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a=moves[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b=moves[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vv[a][b]=flag;</span><br><span class="line">            <span class="keyword">if</span>((vv[a][<span class="number">0</span>]==flag&amp;&amp;vv[a][<span class="number">1</span>]==flag&amp;&amp;vv[a][<span class="number">2</span>]==flag)||(vv[<span class="number">0</span>][b]==flag&amp;&amp;vv[<span class="number">1</span>][b]==flag&amp;&amp;vv[<span class="number">2</span>][b]==flag)||(vv[<span class="number">0</span>][<span class="number">0</span>]==flag&amp;&amp;vv[<span class="number">1</span>][<span class="number">1</span>]==flag&amp;&amp;vv[<span class="number">2</span>][<span class="number">2</span>]==flag)||(vv[<span class="number">0</span>][<span class="number">2</span>]==flag&amp;&amp;vv[<span class="number">1</span>][<span class="number">1</span>]==flag&amp;&amp;vv[<span class="number">2</span>][<span class="number">0</span>]==flag))&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(moves.size()&lt;<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Pending"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Draw"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5276-不浪费原料的汉堡制作方案"><a href="#5276-不浪费原料的汉堡制作方案" class="headerlink" title="5276. 不浪费原料的汉堡制作方案"></a>5276. 不浪费原料的汉堡制作方案</h4><p>圣诞活动预热开始啦，汉堡店推出了全新的汉堡套餐。为了避免浪费原料，请你帮他们制定合适的制作计划。</p><p>给你两个整数 tomatoSlices 和 cheeseSlices，分别表示番茄片和奶酪片的数目。不同汉堡的原料搭配如下：</p><p>巨无霸汉堡：4 片番茄和 1 片奶酪<br>小皇堡：2 片番茄和 1 片奶酪<br>请你以 [total_jumbo, total_small]（[巨无霸汉堡总数，小皇堡总数]）的格式返回恰当的制作方案，使得剩下的番茄片 tomatoSlices 和奶酪片 cheeseSlices 的数量都是 0。</p><p>如果无法使剩下的番茄片 tomatoSlices 和奶酪片 cheeseSlices 的数量为 0，就请返回 []。</p><p>示例 1：</p><p>输入：tomatoSlices = 16, cheeseSlices = 7<br>输出：[1,6]<br>解释：制作 1 个巨无霸汉堡和 6 个小皇堡需要 4<em>1 + 2</em>6 = 16 片番茄和 1 + 6 = 7 片奶酪。不会剩下原料。<br>示例 2：</p><p>输入：tomatoSlices = 17, cheeseSlices = 4<br>输出：[]<br>解释：只制作小皇堡和巨无霸汉堡无法用光全部原料。<br>示例 3：</p><p>输入：tomatoSlices = 4, cheeseSlices = 17<br>输出：[]<br>解释：制作 1 个巨无霸汉堡会剩下 16 片奶酪，制作 2 个小皇堡会剩下 15 片奶酪。<br>示例 4：</p><p>输入：tomatoSlices = 0, cheeseSlices = 0<br>输出：[0,0]<br>示例 5：</p><p>输入：tomatoSlices = 2, cheeseSlices = 1<br>输出：[0,1]</p><p>提示：</p><p>0 &lt;= tomatoSlices &lt;= 10^7<br>0 &lt;= cheeseSlices &lt;= 10^7</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>鸡兔同笼问题，直接解方程组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numOfBurgers(<span class="keyword">int</span> t, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        x=(<span class="number">4</span>*c-t)/<span class="number">2</span>;</span><br><span class="line">        y=(t<span class="number">-2</span>*c)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">4</span>*c-t)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;(t<span class="number">-2</span>*c)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            v.push_back(y);</span><br><span class="line">            v.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> v; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>水平到这，后面的题解请移步到汉奇大佬那！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目链接：&quot;&gt;&lt;a href=&quot;#题目链接：&quot; class=&quot;headerlink&quot; title=&quot;题目链接：&quot;&gt;&lt;/a&gt;题目链接：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-16
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/categories/acm/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>hexo+next博客-&gt;github+coding=疯狂踩坑</title>
    <link href="http://yoursite.com/2019/11/25/thank-you/"/>
    <id>http://yoursite.com/2019/11/25/thank-you/</id>
    <published>2019-11-25T11:42:16.000Z</published>
    <updated>2019-11-29T07:42:56.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-next博客-gt-github-coding-疯狂踩坑"><a href="#hexo-next博客-gt-github-coding-疯狂踩坑" class="headerlink" title="hexo+next博客-&gt;github+coding=疯狂踩坑"></a>hexo+next博客-&gt;github+coding=疯狂踩坑</h1><h1 id="我太难了！！"><a href="#我太难了！！" class="headerlink" title="我太难了！！!"></a>我太难了！！!</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo-next博客-gt-github-coding-疯狂踩坑&quot;&gt;&lt;a href=&quot;#hexo-next博客-gt-github-coding-疯狂踩坑&quot; class=&quot;headerlink&quot; title=&quot;hexo+next博客-&amp;gt;github+cod
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode第164场周赛题解</title>
    <link href="http://yoursite.com/2019/11/24/Leetcode%E7%AC%AC164%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/24/Leetcode第164场周赛题解/</id>
    <published>2019-11-24T07:55:31.000Z</published>
    <updated>2019-11-24T10:54:02.814Z</updated>
    
    <content type="html"><![CDATA[<h4 id="5271-访问所有点的最小时间"><a href="#5271-访问所有点的最小时间" class="headerlink" title="5271. 访问所有点的最小时间"></a>5271. 访问所有点的最小时间</h4><p>平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi]。请你计算访问所有这些点需要的最小时间（以秒为单位）。</p><p>你可以按照下面的规则在平面上移动：</p><p>每一秒沿水平或者竖直方向移动一个单位长度，或者跨过对角线（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。<br>必须按照数组中出现的顺序来访问这些点。</p><p>示例 1：</p><p><img src="/2019/11/24/Leetcode%E7%AC%AC164%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><p>输入：points = [[1,1],[3,4],[-1,0]]<br>输出：7<br>解释：一条最佳的访问路径是： [1,1] -&gt; [2,2] -&gt; [3,3] -&gt; [3,4] -&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; [-1,0]<br>从 [1,1] 到 [3,4] 需要 3 秒<br>从 [3,4] 到 [-1,0] 需要 4 秒<br>一共需要 7 秒<br>示例 2：</p><p>输入：points = [[3,2],[-2,2]]<br>输出：5</p><p>提示：</p><p>points.length == n<br>1 &lt;= n &lt;= 100<br>points[i].length == 2<br>-1000 &lt;= points[i][0], points[i][1] &lt;= 1000</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>两点之间的距离就是直角三角形直角边的较大值 代码如下： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minTimeToVisitAllPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            x=<span class="built_in">abs</span>(p[i+<span class="number">1</span>][<span class="number">0</span>]-p[i][<span class="number">0</span>]);</span><br><span class="line">            y=<span class="built_in">abs</span>(p[i+<span class="number">1</span>][<span class="number">1</span>]-p[i][<span class="number">1</span>]);</span><br><span class="line">           sum=sum+max(x,y);         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5272-统计参与通信的服务器"><a href="#5272-统计参与通信的服务器" class="headerlink" title="5272. 统计参与通信的服务器"></a>5272. 统计参与通信的服务器</h4><p>这里有一幅服务器分布图，服务器的位置标识在 m * n 的整数矩阵网格 grid 中，1 表示单元格上有服务器，0 表示没有。</p><p>如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。</p><p>请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。</p><p>示例 1：</p><p>输入：grid = [[1,0],[0,1]]<br>输出：0<br>解释：没有一台服务器能与其他服务器进行通信。</p><p><img src="/2019/11/24/Leetcode%E7%AC%AC164%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/2.jpg" alt="1"></p><p>示例 2：</p><p>输入：grid = [[1,0],[1,1]]<br>输出：3<br>解释：所有这些服务器都至少可以与一台别的服务器进行通信。</p><p>示例 3：</p><p>输入：grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]<br>输出：4<br>解释：第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。</p><p>提示：</p><p>m == grid.length<br>n == grid[i].length<br>1 &lt;= m &lt;= 250<br>1 &lt;= n &lt;= 250<br>grid[i][j] == 0 or 1</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><h5 id="开两个数组维护一下当且列或当前行服务器的个数，然后遍历一下服务器，看它所在行或列有没"><a href="#开两个数组维护一下当且列或当前行服务器的个数，然后遍历一下服务器，看它所在行或列有没" class="headerlink" title="开两个数组维护一下当且列或当前行服务器的个数，然后遍历一下服务器，看它所在行或列有没"></a>开两个数组维护一下当且列或当前行服务器的个数，然后遍历一下服务器，看它所在行或列有没</h5><h5 id="有两台以上服务器即可，时间复杂度-。"><a href="#有两台以上服务器即可，时间复杂度-。" class="headerlink" title="有两台以上服务器即可，时间复杂度  。"></a>有两台以上服务器即可，时间复杂度 <img src="https://www.zhihu.com/equation?tex=O%28nm%29" alt="[公式]"> 。</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">作者：PerfectPan小明</span><br><span class="line">链接：https:<span class="comment">//zhuanlan.zhihu.com/p/93403520</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> col[<span class="number">300</span>],row[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;vec;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countServers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(col,<span class="number">0</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line">        <span class="built_in">memset</span>(row,<span class="number">0</span>,<span class="keyword">sizeof</span>(row));</span><br><span class="line">        vec.clear();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)grid.size();++i)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)grid[i].size();++j)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    vec.push_back(make_pair(i,j));</span><br><span class="line">                    col[i]++,row[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)vec.size();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (col[vec[i].first]&gt;=<span class="number">2</span> || row[vec[i].second]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                ans+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;5271-访问所有点的最小时间&quot;&gt;&lt;a href=&quot;#5271-访问所有点的最小时间&quot; class=&quot;headerlink&quot; title=&quot;5271. 访问所有点的最小时间&quot;&gt;&lt;/a&gt;5271. 访问所有点的最小时间&lt;/h4&gt;&lt;p&gt;平面上有 n 个点，点的位置用整
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/categories/acm/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2017网易春招 消除重复元素</title>
    <link href="http://yoursite.com/2019/11/22/2017%E7%BD%91%E6%98%93%E6%98%A5%E6%8B%9B-%E6%B6%88%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/11/22/2017网易春招-消除重复元素/</id>
    <published>2019-11-22T06:22:54.000Z</published>
    <updated>2019-11-22T06:26:14.784Z</updated>
    
    <content type="html"><![CDATA[<h4 id="set的简单使用"><a href="#set的简单使用" class="headerlink" title="set的简单使用"></a>set的简单使用</h4><p>小易有一个长度为n序列，小易想移除掉里面的重复元素，但是小易想是对于每种元素保留最后出现的那个。小易遇到了困难,希望你来帮助他。<br>输入描述:<br>输入包括两行：<br>第一行为序列长度n(1 ≤ n ≤ 50)<br>第二行为n个数sequence[i](1 ≤ sequence[i] ≤ 1000)，以空格分隔</p><p>输出描述:<br>输出消除重复元素之后的序列，以空格分隔，行末无空格</p><p>输入例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">100 100 100 99 99 99 100 100 100</span><br></pre></td></tr></table></figure><p>输出例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99 100</span><br></pre></td></tr></table></figure><p>思路：从后向前去重（运用了set去重）；</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1002</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.find(a[i])==s.end())&#123;</span><br><span class="line">            s.insert(a[i]);</span><br><span class="line">            v.push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v[v.size()<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=v.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;set的简单使用&quot;&gt;&lt;a href=&quot;#set的简单使用&quot; class=&quot;headerlink&quot; title=&quot;set的简单使用&quot;&gt;&lt;/a&gt;set的简单使用&lt;/h4&gt;&lt;p&gt;小易有一个长度为n序列，小易想移除掉里面的重复元素，但是小易想是对于每种元素保留最后出现的那
      
    
    </summary>
    
    
      <category term="STL" scheme="http://yoursite.com/categories/STL/"/>
    
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>vmare安装Mac虚拟机</title>
    <link href="http://yoursite.com/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/11/20/vmare安装Mac虚拟机/</id>
    <published>2019-11-20T10:51:42.000Z</published>
    <updated>2019-11-20T11:43:00.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li><p>WIN10</p></li><li><h5 id="VMware-Workstation-Pro-14或者15"><a href="#VMware-Workstation-Pro-14或者15" class="headerlink" title="VMware Workstation Pro 14或者15"></a>VMware Workstation Pro 14或者15</h5></li></ul><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><h5 id="1-VMware-Workstation-Pro"><a href="#1-VMware-Workstation-Pro" class="headerlink" title="1.VMware Workstation Pro"></a>1.VMware Workstation Pro</h5><p>官网下载地址：<br><a href="http://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.0.0-10134415.exe" target="_blank" rel="noopener">http://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.0.0-10134415.exe</a><br>给几个序列号：<br>AC11H-4HZ05-08EDQ-APQGX-YCUC8<br>ZG780-8EZ9M-M89LY-M5PEG-W2AZ8<br>ZF3NU-D6XEJ-48E7Q-27YNC-PC8ED</p><h5 id="2-MacOS-Unlocker-for-VMware"><a href="#2-MacOS-Unlocker-for-VMware" class="headerlink" title="2.MacOS Unlocker for VMware"></a>2.MacOS Unlocker for VMware</h5><p>下载地址<br><a href="https://github.com/DrDonk/unlocker" target="_blank" rel="noopener">https://github.com/DrDonk/unlocker</a></p><p> <a href="https://github.com/paolo-projects/unlocker/releases" target="_blank" rel="noopener">https://github.com/paolo-projects/unlocker/releases</a> </p><p><a href="http://www.121down.com/soft/softview-43433.html" target="_blank" rel="noopener">http://www.121down.com/soft/softview-43433.html</a></p><p>应该有好用的吧！！！！</p><p>MAC OS 10.11<br>下面两个任选其一：<br><a href="http://pan.baidu.com/s/1jI78s4Y" target="_blank" rel="noopener">http://pan.baidu.com/s/1jI78s4Y</a> 密码：drbh<br><a href="https://pan.baidu.com/s/1ggZ7oFx" target="_blank" rel="noopener">https://pan.baidu.com/s/1ggZ7oFx</a> 密码: sxyj</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在安装完成 VMware Workstation Pro 15 后，该软件有5个服务是自动启动的，只要你安装了，不管你有没有使用，他们都是工作的。要使用 MacOS Unlocker for VMware 对 VMware Workstation Pro 15 进行破解，就必须手动关闭这5个服务，软件无法对正在运行的文件修改。</p><h5 id="1-关闭VMware的5个自动启动服务"><a href="#1-关闭VMware的5个自动启动服务" class="headerlink" title="1.关闭VMware的5个自动启动服务"></a>1.关闭VMware的5个自动启动服务</h5><p>在计算机管理中找到服务</p><ol><li><p>双击，手动关闭这5个服务。</p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/1.png" alt="1"></p></li><li><p>运行MacOS Unlocker for VMware运行<br>MacOS Unlocker for VMware就是MAC 补丁。按照上面的网址下载解压后如下：</p></li></ol><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/2.png" alt="1"></p><p> 右键上图文件，以管理员身份运行之 </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/3.png" alt="1"></p><p> 运行<strong>成功</strong>后，文件夹里文件发生了变化：多了backup和tools两个文件夹。效果如下： </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/4.png" alt="1"></p><p> <strong>准备工作结束了。这个tools文件夹里有我们要的东西，下面用到时再说。</strong> </p><h3 id="MAC虚拟机设置"><a href="#MAC虚拟机设置" class="headerlink" title="MAC虚拟机设置"></a>MAC虚拟机设置</h3><p><strong>出现以下的图片说明你的Mac解锁才算成功了，否则继续换工具破解虚拟机的Mac选项</strong></p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/5.png" alt="1"></p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/6.png" alt="1"></p><p>以上就是安装过程中需要注意的地方，其他的下一步即可。</p><h3 id="启动MAC前准备工作"><a href="#启动MAC前准备工作" class="headerlink" title="启动MAC前准备工作"></a>启动MAC前准备工作</h3><p>虚拟机安装建立后，<strong>别着急启动</strong>，还要更改这个虚拟机的配置文件。找到上图中安装虚拟机的位置，找到以”.vmx”结尾的文件，打开进行编辑。</p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/7.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在smc.present = &quot;TRUE&quot; 后面添加smc.version = &quot;0&quot;</span><br></pre></td></tr></table></figure><p> 结果如下 </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/8.png" alt="1"></p><p> 保存退出。 </p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>启动客户机，进入 MAC 系统配置界面，常规下一步操作。直到出现<strong>没有足够的可用空间来进行安装</strong>。</p><p>解决坑点</p><h5 id="1-解决安装黑苹果出现“没有符合安装资格的软件包”"><a href="#1-解决安装黑苹果出现“没有符合安装资格的软件包”" class="headerlink" title="1.解决安装黑苹果出现“没有符合安装资格的软件包”"></a>1.解决安装黑苹果出现“没有符合安装资格的软件包”</h5><h5 id="重点：因为这是最后会出现的bug，提前解决防止重启死机。"><a href="#重点：因为这是最后会出现的bug，提前解决防止重启死机。" class="headerlink" title="重点：因为这是最后会出现的bug，提前解决防止重启死机。"></a>重点：因为这是最后会出现的bug，提前解决防止重启死机。</h5><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/9.jpg" alt="1"></p><p>而其他版本却为出现此问题。后来在论坛找到了解决方法，原来是时间问题。</p><p>可能你也会遇到：在重组Mac系统时，遇到“应用程序副本不能验证 它在下载过程中可能已遭破坏或篡改”，这个是因为主板时间不正确造成，可以通过终端修改时间解决。</p><p>解决方法:</p><p>打开实用工具——终端</p><p>如果你的Mac是联网状体，可以输入一下代码：</p><p>ntpdate time.apple.com</p><p>不过安装的时候一般是没法联网的</p><p>我们只能输入：date 070512052018.03 （这里设置一个2015年以后的时间，因为10.11发布时2015年）</p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/10.jpg" alt="1"></p><p>回车后，在终端——退出终端。</p><p>然后再进行安装就正常了。</p><h5 id="2-出现没有足够的可用空间来进行安装。"><a href="#2-出现没有足够的可用空间来进行安装。" class="headerlink" title="2.出现没有足够的可用空间来进行安装。"></a>2.出现<strong>没有足够的可用空间来进行安装</strong>。</h5><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/11.png" alt="1"></p><p> 点击屏幕上方的 “实用工具 -&gt; 磁盘工具”。选中 “ vmware workstation SATA hard drive media ”，点击 “抹掉”。</p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/13.png" alt="1"></p><p> 退出 “磁盘工具”，再次进行安装，此时选择出现的分区。 </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/12.png" alt="1"></p><p> 后面都是常规化操作。 给个链接</p><p><a href="https://blog.csdn.net/weixin_43299649/article/details/82881567" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43299649/article/details/82881567</a></p><h2 id="安装VMware-Tool"><a href="#安装VMware-Tool" class="headerlink" title="安装VMware Tool"></a>安装VMware Tool</h2><p>安装完成后，鼠标和窗口大小都不舒服。这时候就要安装VMware Tool。还记得MacOS Unlocker for VMware 安装后出现的两个文件夹么，其中一个tools的文件夹中有我们要的工具。</p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/14.png" alt="1"></p><p> 加载VMware Tool </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/15.png" alt="1"></p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/16.png" alt="1"></p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/17.png" alt="1"></p><p> 设置完成后，再次右键光盘图标，点击”连接”。 </p><p><img src="/2019/11/20/vmare%E5%AE%89%E8%A3%85Mac%E8%99%9A%E6%8B%9F%E6%9C%BA/18.png" alt="1"></p><h5 id="安装VMware-Tool，重启。"><a href="#安装VMware-Tool，重启。" class="headerlink" title="安装VMware Tool，重启。"></a>安装VMware Tool，重启。</h5><p>如果VMware的服务还没有开启，这时候可以将VMware的5个服务手动启动了，怎么关闭的就怎么开启。 </p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>安装顺序很重要；</li><li>所有安装路径建议纯英文；</li><li>安装成功后第一时间快照一下，养成良好习惯；</li></ul><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://blog.csdn.net/zyzmzm_/article/details/82562136" target="_blank" rel="noopener">https://blog.csdn.net/zyzmzm_/article/details/82562136</a></p><p><a href="https://blog.csdn.net/longji/article/details/83280940" target="_blank" rel="noopener">https://blog.csdn.net/longji/article/details/83280940</a></p><p><a href="https://blog.csdn.net/bigbear00007/article/details/89740165" target="_blank" rel="noopener">https://blog.csdn.net/bigbear00007/article/details/89740165</a></p><p><a href="https://blog.csdn.net/weixin_43299649/article/details/82881567" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43299649/article/details/82881567</a></p><p>多多百度，有耐心一定会成功！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WIN10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;VMware-Workstation-Pro-14
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-163周赛题解</title>
    <link href="http://yoursite.com/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/17/leetcode-163周赛题解/</id>
    <published>2019-11-17T05:47:37.000Z</published>
    <updated>2019-11-17T06:57:54.878Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://leetcode-cn.com/contest/weekly-contest-163/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-163/</a></p><h3 id="5263-二维网格迁移"><a href="#5263-二维网格迁移" class="headerlink" title="5263.二维网格迁移"></a>5263.二维网格迁移</h3><p>给你一个 <code>n</code> 行 <code>m</code> 列的二维网格 <code>grid</code> 和一个整数 <code>k</code>。你需要将 <code>grid</code> 迁移 <code>k</code> 次。</p><p>每次「迁移」操作将会引发下述活动：</p><ul><li>位于 <code>grid[i][j]</code> 的元素将会移动到 <code>grid[i][j + 1]</code>。</li><li>位于 <code>grid[i][m - 1]</code> 的元素将会移动到 <code>grid[i + 1][0]</code>。</li><li>位于 <code>grid[n - 1][m - 1]</code> 的元素将会移动到 <code>grid[0][0]</code>。</li></ul><p>请你返回 <code>k</code> 次迁移操作后最终得到的 <strong>二维网格</strong>。</p><p><strong>示例 1：</strong></p><p><img src="/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1</span><br><span class="line">输出：[[9,1,2],[3,4,5],[6,7,8]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/2.png" alt="2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4</span><br><span class="line">输出：[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</span><br><span class="line">输出：[[1,2,3],[4,5,6],[7,8,9]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= grid.length &lt;= 50</code></li><li><code>1 &lt;= grid[i].length &lt;= 50</code></li><li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li><li><code>0 &lt;= k &lt;= 100</code></li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p><strong>1.把二维网格按行优先，排列成一维数组。</strong><br>[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]]<br><strong>2.一维数组</strong><br>[3,8,1,9,19,7,2,5,4,6,11,10,12,0,21,13]<br><strong>3.迁移k次之后</strong><br>[12,0,21,13,3,8,1,9,19,7,2,5,4,6,11,10]<br><strong>4.这种对二维网格的迁移，实际上是把一维数组循环右移k位</strong>。</p><p><strong>5.再根据对应关系把一维数组转换为二维数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//对应关系:grid[i/m][i%m]=a[i];</span><br></pre></td></tr></table></figure><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; shiftGrid(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">int</span> n=grid.size();</span><br><span class="line">        <span class="keyword">int</span> m=grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                </span><br><span class="line">                vec.push_back(grid[i][j]);</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=vec.size();</span><br><span class="line">        <span class="keyword">int</span> a[l+<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">            a[(i+k)%l]=vec[i];</span><br><span class="line">            <span class="comment">//cout&lt;&lt;a[i]&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">            grid[i/m][i%m]=a[i];</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">return</span> grid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>高效代码</strong></p><p> <strong>可以把这个二维数组想像成一个n*m的环,推进k次就是把环的起点后移k位</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; shiftGrid(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(grid.size(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(grid[<span class="number">0</span>].size()));</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">int</span> c, r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = i * grid[<span class="number">0</span>].size() + j + k;</span><br><span class="line">                r = (tmp  / grid[<span class="number">0</span>].size()) % grid.size();</span><br><span class="line">                c = tmp % grid[<span class="number">0</span>].size();</span><br><span class="line">                res[r][c] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5264-在受污染的二叉树中查找元素"><a href="#5264-在受污染的二叉树中查找元素" class="headerlink" title="5264.在受污染的二叉树中查找元素"></a>5264.在受污染的二叉树中查找元素</h3><p>给出一个满足下述规则的二叉树：</p><ol><li><code>root.val == 0</code></li><li>如果 <code>treeNode.val == x</code> 且 <code>treeNode.left != null</code>，那么 <code>treeNode.left.val == 2 * x + 1</code></li><li>如果 <code>treeNode.val == x</code> 且 <code>treeNode.right != null</code>，那么 <code>treeNode.right.val == 2 * x + 2</code></li></ol><p>现在这个二叉树受到「污染」，所有的 <code>treeNode.val</code> 都变成了 <code>-1</code>。</p><p>请你先还原二叉树，然后实现 <code>FindElements</code> 类：</p><ul><li><code>FindElements(TreeNode* root)</code> 用受污染的二叉树初始化对象，你需要先把它还原。</li><li><code>bool find(int target)</code> 判断目标值 <code>target</code> 是否存在于还原后的二叉树中并返回结果。</li></ul><p><strong>示例 1：</strong></p><p><strong><img src="/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/3.jpg" alt="3"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]</span><br><span class="line">[[[-1,null,-1]],[1],[2]]</span><br><span class="line">输出：</span><br><span class="line">[null,false,true]</span><br><span class="line">解释：</span><br><span class="line">FindElements findElements = new FindElements([-1,null,-1]); </span><br><span class="line">findElements.find(1); // return False </span><br><span class="line">findElements.find(2); // return True</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/4.jpg" alt="4"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]</span><br><span class="line">[[[-1,-1,-1,-1,-1]],[1],[3],[5]]</span><br><span class="line">输出：</span><br><span class="line">[null,true,true,false]</span><br><span class="line">解释：</span><br><span class="line">FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);</span><br><span class="line">findElements.find(1); // return True</span><br><span class="line">findElements.find(3); // return True</span><br><span class="line">findElements.find(5); // return False</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="/2019/11/17/leetcode-163%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/5.jpg" alt="5"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]</span><br><span class="line">[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]</span><br><span class="line">输出：</span><br><span class="line">[null,true,false,false,true]</span><br><span class="line">解释：</span><br><span class="line">FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);</span><br><span class="line">findElements.find(2); // return True</span><br><span class="line">findElements.find(3); // return False</span><br><span class="line">findElements.find(4); // return False</span><br><span class="line">findElements.find(5); // return True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p><code>TreeNode.val == -1</code></p></li><li><p>二叉树的高度不超过 <code>20</code></p></li><li><p>节点的总数在 <code>[1, 10^4]</code> 之间</p></li><li><p>调用 <code>find()</code> 的总次数在 <code>[1, 10^4]</code> 之间</p></li><li><p><code>0 &lt;= target &lt;= 10^6</code></p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4></li></ul>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindElements</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;hash;</span><br><span class="line">FindElements(TreeNode* root) &#123;</span><br><span class="line">root-&gt;val = <span class="number">0</span>;</span><br><span class="line">restore(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hash.count(target))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restore</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line">hash.insert(root-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">root-&gt;left-&gt;val = (root-&gt;val &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">restore(root-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">root-&gt;right-&gt;val = (root-&gt;val &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">restore(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  给本题里未受污染的二叉树节点值加一，它的值就类似于满二叉树节点间的关系。</p><pre><code>0                  1</code></pre><p>   1 2     会变为      2 3<br>  3 4                4 5<br>  每个节点的值为 x, 左孩子值为 2x，右孩子值为 2x + 1。</p><p>  深度优先遍历二叉树，填入对应的值。</p><p>  并把值存入哈希表中，查询时直接返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindElements</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FindElements(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root) dfs(root, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.count(target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">const</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        root-&gt;val = val - <span class="number">1</span>;</span><br><span class="line">        s.insert(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) dfs(root-&gt;left, <span class="number">2</span> * val);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) dfs(root-&gt;right, <span class="number">2</span> * val + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FindElements object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FindElements* obj = new FindElements(root);</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;find(target);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="5265-可被三整除的最大和"><a href="#5265-可被三整除的最大和" class="headerlink" title="5265.可被三整除的最大和"></a>5265.可被三整除的最大和</h3><p>给你一个整数数组 nums，请你找出并返回能被三整除的元素最大和。</p><p>示例 1：</p><p>输入：nums = [3,6,5,1,8]<br>输出：18<br>解释：选出数字 3, 6, 1 和 8，它们的和是 18（可被 3 整除的最大和）。<br>示例 2：</p><p>输入：nums = [4]<br>输出：0<br>解释：4 不能被 3 整除，所以无法选出数字，返回 0。<br>示例 3：</p><p>输入：nums = [1,2,3,4,4]<br>输出：12<br>解释：选出数字 1, 3, 4 以及 4，它们的和是 12（可被 3 整除的最大和）。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 4 * 10^4<br>1 &lt;= nums[i] &lt;= 10^4</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>思路：求出数组和sum，如果sum%3==1 那么答案就是sum减去两个模3=2的或者一个模3=1的。如果sum%3==2 那么答案就是sum减去两个模1的或者一个模2的数字。统计数组里面模2 和模1的，找到最小值，最后两种可能都试一下就可以了。</p><p>为了省时间我用的排序，其实不用排序也可以，O(n)找最小即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1,v2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:nums)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=x;</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">1</span>)v1.push_back(x);</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">2</span>)v2.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v1.begin(),v1.end());</span><br><span class="line">        sort(v2.begin(),v2.end());</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">if</span>(v1.size())tmp = v1[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(v2.size()&gt;=<span class="number">2</span>)tmp=min(tmp,v2[<span class="number">0</span>]+v2[<span class="number">1</span>]);</span><br><span class="line">            sum-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">if</span>(v2.size())tmp = v2[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(v1.size()&gt;=<span class="number">2</span>)tmp=min(tmp,v1[<span class="number">0</span>]+v1[<span class="number">1</span>]);</span><br><span class="line">            sum-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-163/&quot; 
      
    
    </summary>
    
    
      <category term="acm" scheme="http://yoursite.com/categories/acm/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>hexo本地博客转移</title>
    <link href="http://yoursite.com/2019/11/16/hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/11/16/hexo本地博客转移/</id>
    <published>2019-11-16T03:07:54.000Z</published>
    <updated>2019-11-16T03:19:03.348Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-复制配置文件"><a href="#1-复制配置文件" class="headerlink" title="1. 复制配置文件"></a>1. 复制配置文件</h4><p>将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_config.yml备份即可。</p><p><img src="/2019/11/16/hexo%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/1.png" alt="1"></p><h4 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h4><p>sudo apt-get install nodejs<br>sudo apt-get install npm</p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h4><p>sudo npm install -g hexo</p><h4 id="4-新建文件夹，cd进入"><a href="#4-新建文件夹，cd进入" class="headerlink" title="4.新建文件夹，cd进入"></a>4.新建文件夹，cd进入</h4><p>hexo init<br>使用hexo s查看是否能使用。</p><h4 id="5-将备份的文件覆盖到现在的文件夹"><a href="#5-将备份的文件覆盖到现在的文件夹" class="headerlink" title="5.将备份的文件覆盖到现在的文件夹"></a>5.将备份的文件覆盖到现在的文件夹</h4><p>现在使用hexo s查看是否已经成功。</p><p>此时，所有工作已经完成。</p><h3 id="最安全的hexo多台电脑同步博客解决方案–非新建分支"><a href="#最安全的hexo多台电脑同步博客解决方案–非新建分支" class="headerlink" title="最安全的hexo多台电脑同步博客解决方案–非新建分支"></a>最安全的hexo多台电脑同步博客解决方案–非新建分支</h3><p>我们经常有这样一个需求场景：需要在多台电脑间完成 Hexo 博客的撰写和发布，这就涉及到如何多台电脑同步博客的问题。</p><p><strong>我最近也遇到了这个问题，网上看了很多方案。目前网上大部分 hexo 多电脑同步博客方案都是新建一个开源分支去存放博客源文件，但是你会发现，这样做的话很多第三插件配置的appid、app_key等密钥信息也暴露在了公开的仓库里，存在一定的数据安全隐患。</strong></p><p><strong>那有没有什么办法不暴露这些信息呢？对了，用一个私有仓库来存放博客源文件不就结了嘛。虽然 Github 的私有仓库是收费的，但是我的博客是同时部署在 Github 和 Coding 的，而 Coding 是可以新建私有仓库的。Nice，完美解决。</strong></p><p>当我准备写遍博客来分享（xuan yao）想到的这个解决方案时，最后还是荣幸的发现一遍文章已经分享了这个方案，只是在搜索引擎中不太好搜出来。本着“不重复造轮子的原则”，笔者就不重写了，而且他已经写的很好了。但是有几个问题需要特别注意一下：</p><ol><li><p>该文中删除主题的 .git 配置，如果你有多个主题文件夹的话，需要都删除(如 NexT 主题)。然后删除的命令那位笔者不小心写错了，应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ./themes/next/.git/</span><br></pre></td></tr></table></figure><p>用这条命令来删除你对应主题文件夹里的.git 文件夹，注意 .git 是一个隐藏文件夹。</p></li><li><p><code>.gitignore</code> 文件夹在 Hexo 的根目录下可能已经存在了，可以打开和该文中的忽略事项比对一下，如果一样，接着 <code>git init</code> 初始化 git 仓库就好；如果没有该 <code>.gitignore</code> 文件夹就新建一个添加相应忽略事项再 <code>git init</code> 初始化。</p></li><li><p><strong>这点需要特别注意，否则可能导致迁移失败：</strong><br>虽然我们第 1 步中删除了主题的 .git 配置，第 2 步中Hexo项目根目录的 <code>.gitignore</code> 文件也并没有忽略掉 <code>theme</code> 这个文件夹。<strong>但是！！</strong> NexT 主题的文件夹原来是用 git 来管理的，里面还有一个 <code>.gitignore</code> 文件，把 <code>themes/next/source/lib</code> 目录下的很多文件给忽略掉了。</p><p>这就导致了你上传到私有仓库时，你以为你把 <code>themes</code> 文件下的所有内容都上传到仓库了，但其实 “偷偷”的把 <code>themes/next/source/lib</code> 目录下的很多必要的文件也忽略掉了，并没有上传。然后在新电脑上拉下来的时候，<code>hexo g</code>、<code>hexo s</code> 一预览，你会奇怪的发现：<strong>所有的 FontAwesome 相关的图标都不见了，其他的功能一切正常。</strong></p><p><strong>正确的做法是</strong>：在新机器上把私有仓库上的博客源文件 clone 下来后，因为还缺点原来的文件，所以应该去原来机器上 <code>themes/next/source/lib</code> 目录下，把整个 lib 目录下的文件全部复制粘贴到新机器对应的 <code>themes/next/source/lib</code> 目录下，这样就能正常生成站点文件了。</p><blockquote><p>注意：同理，如果你的 <code>themes</code> 目录下有多个主题配置文件的话，可以查看是否有 <code>.gitignore</code> 文件，用 git 上传私有仓库时是否也忽略了一些必要资源，如果有再新电脑上对应复制过来就 OK 了。</p></blockquote><p>关于这个问题的详情，可以看这：<a href="https://github.com/theme-next/hexo-theme-next/issues/564#issuecomment-451385682" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next/issues/564#issuecomment-451385682</a></p></li><li><p>在新电脑上 <code>npm install</code> 下载 hexo 所需的环境的时候，要切到 hexo 的根目录下，再执行 <code>npm install</code>。</p></li><li><p>当你在新电脑用 <code>npm install</code> 下载依赖的第三插件时，由于 node 的版本、众多第三方插件、跨平台等原因，可能有的插件会存在兼容性问题，导致下载不下来，笔者想迁移到 Mac 上就遇到兼容性问题了，<code>fsevent</code> 插件目前不支持 node v11+ 版本，而刚配置新电脑的 node 环境时，默认安装的是最新版的 node，需要降低 node 的版本才能下载成功。</p><p><a href="https://www.alankeene.com/2019/0102/fsevents-didnot-soppurt-node11.html" target="_blank" rel="noopener">node 11 无法安装 fsevents 插件的解决方案</a></p><p>至于如何降低 node 的版本，其实你不用删除，有一个叫 <code>nvm</code> （Node Version Manager）的工具，专门用来管理多个版本的 node 环境的，你可以下载多个版本的 node 存在你的机器中，用 <code>nvm</code> 的命令行就可以实现不同版本 node 环境的随意切换，非常方便。</p><p><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">这是 nvm 的 github 地址</a></p></li><li><p>好，当你在新的电脑上写完博客，本地预览也没问题，准备用 hexo d 部署到 Github 和 Coding 上前，别忘了把新电脑的 SSH 公钥配置到 Github 和 Coding 上。</p><p>然后用 hexo d部署时，由于在新机器上，SSH 密钥和之前的不一样，第一次尝试连接 Github 主机时会提示：<br><code>The authenticity of host &#39;github.com&#39; can&#39;t be established.</code><br><code>Are you sure you want continue connecting?</code></p><p>输入 yes 就好，同理 coding 仓库也会提示，同样输入yes。至此，新电脑上写完的博客也成功同步更新到 Github 和 Coding 的仓库上了。</p><p>更新完博客后，记得 用 git push 将新电脑上改动的博客源文件也 push 到私有仓库中，实现博客源文件的同步更新。</p></li><li><p>当你在另一台电脑上准备开始写博客前，记得把远程私有仓库的最新博客源文件拉到本地，<strong>但记得不要用 <code>git pull</code> 的方式</strong>，用如下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将远程 git 仓库上最新的内容拉取到本地，将本地库所关联的远程库更新至最新</span><br><span class="line">git fetch --all</span><br><span class="line">//强制将本地库的内容指向最新远程仓库的master分支   </span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure></li></ol><p>最后附上该篇博客的地址：</p><ul><li><a href="https://ricky.moe/2017/01/13/hexo-perfect-synchronize/" target="_blank" rel="noopener">最完美的Hexo多电脑同步方法</a></li></ul><p>从此，你就可以在多台电脑间愉快地同步更新博客啦～<br>若到一台新的电脑上，只要把博客源码 clone 下来，配置好新机器的 <code>node</code>、<code>hexo</code>、<code>git</code> 环境，随时可以发车～</p><p><strong><code>2019.1.8 最新更新：</code> 好消息是：Github 从 2019.1.8 日起可以免费使用私有仓库了，那大家也可以选择把博客源文件传到 Github 私有仓库上，维护起来更加方便了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-复制配置文件&quot;&gt;&lt;a href=&quot;#1-复制配置文件&quot; class=&quot;headerlink&quot; title=&quot;1. 复制配置文件&quot;&gt;&lt;/a&gt;1. 复制配置文件&lt;/h4&gt;&lt;p&gt;将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_conf
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux安装包的区别</title>
    <link href="http://yoursite.com/2019/11/16/linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/11/16/linux安装包的区别/</id>
    <published>2019-11-16T03:00:01.000Z</published>
    <updated>2019-11-16T03:05:31.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="deb、rpm、tar-gz三种Linux软件包的区别"><a href="#deb、rpm、tar-gz三种Linux软件包的区别" class="headerlink" title="deb、rpm、tar.gz三种Linux软件包的区别"></a>deb、rpm、tar.gz三种Linux软件包的区别</h4><p>接解LINUX的，同样都是for linux，但rpm、tar.gz、deb包还是有很大区别的，</p><p>这种区别可使安装过程进行不下去。那我们应该下载什么格式的包呢？</p><p>**rpm包-在红帽LINUX、SUSE、Fedora可以直接进行安装，但在Ubuntu中却无法识别；</p><p>deb包-是Ubuntu的专利，在Ubuntu中双击deb包就可以进入自动安装进程；</p><p> tar.gz包-在所有的Linux版本中都能使用，但安装过程也最麻烦。 </p><p>​     要先解压缩，然后在“终端”里用cd命令进入刚才解压的目录，再找到安装链接文件安装。</p><p>   比如tar.gz包解压到了“/temp/*****.tar.gz/”，tar.gz包中的安装链接文件为install：</p><p>​     1- cd/temp/*****.tar.gz/</p><p>​     2- ./install</p><p>​     3- 根据提示输入“ENTER”或“安装目录”</p><p>​     4- 结束</p><h4 id="tar-gz和-zip文件的区别"><a href="#tar-gz和-zip文件的区别" class="headerlink" title=".tar.gz和.zip文件的区别"></a>.tar.gz和.zip文件的区别</h4><p>在一开始下载数据集的时候遇到的疑惑</p><p>他们的不同点在于：</p><p>1 .tar.gz文件一般用于Linux系统上，而.zip文件一般流行于Windows系统上</p><p>2 .tar.gz格式的文件比.zip文件要小很多</p><p>虽然这两种格式的文件有许多不同，但他们都是压缩文件，且文件里包含的内容相同，在windows系统中WinRar等工具同样可以解压缩tar.gz格式的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;deb、rpm、tar-gz三种Linux软件包的区别&quot;&gt;&lt;a href=&quot;#deb、rpm、tar-gz三种Linux软件包的区别&quot; class=&quot;headerlink&quot; title=&quot;deb、rpm、tar.gz三种Linux软件包的区别&quot;&gt;&lt;/a&gt;deb、r
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu如何卸载软件</title>
    <link href="http://yoursite.com/2019/11/16/ubuntu%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/11/16/ubuntu如何卸载软件/</id>
    <published>2019-11-16T02:27:01.000Z</published>
    <updated>2019-11-16T02:53:59.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-使用Synaptic软件包管理器进行卸载"><a href="#1-使用Synaptic软件包管理器进行卸载" class="headerlink" title="1.使用Synaptic软件包管理器进行卸载"></a>1.使用Synaptic软件包管理器进行卸载</h4><p>打开软件包管理器。Ubuntu自带了一个GUI（Graphical User Interface，图形化用户界面）软件包管理器，它可 以让你在一个可视化窗口中卸载程序。如果你不习惯使用命令行，这一工具将非常有用。</p><p>点击系统，然后选择管理。在管理菜单中，选择Synaptic软件包管理器。<br>如果你使用Unity，可以打开dashboard并搜索“Synaptic”</p><p> 某些较新版本的Ubuntu没有预装Synaptic。要安装它，打开终端并输入：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><h4 id="2-使用软件中心进行卸载"><a href="#2-使用软件中心进行卸载" class="headerlink" title="2.使用软件中心进行卸载"></a>2.使用软件中心进行卸载</h4><p> 打开软件中心。软件中心是一个可以安装和卸载Linux软件的GUI软件包管理器。在较旧版本的Ubuntu上，软件中心位于应用程序菜单内。在较近期的版本中，你可以再Launcher内找到软件中心，或者在Dash搜索栏中搜索“software”。 2 打开已安装的软件。在左边窗格内，点击已安装软件链接。这将打开所有已安装在你的系统上的软件列表。 3 卸载程序。选中需要卸载的程序并点击工具栏上的移除按钮。你可能会被要求输入管理员密码。输入密码后，程序将被自动移除。    你可以选择多个程序把它们添加到移除队列，然后点击移除按钮。当第一个程序完成卸载后，将开始对队列中下一个程序进行卸载。 </p><p>注：纯复制，因为基本不用</p><h4 id="3-使用终端进行卸载"><a href="#3-使用终端进行卸载" class="headerlink" title="3.使用终端进行卸载"></a>3.使用终端进行卸载</h4><p> 1.打开一个终端，输入<code>dpkg --list</code> ,按下Enter键，终端输出以下内容，显示的是你电脑上安装的所有软件。  </p><p> 2.在终端中找到你需要卸载的软件的名称，列表是按照首字母排序的。  </p><p>3.在终端上输入命令sudo apt-get –purge remove 包名（–purge是可选项，写上这个属性是将软件及其配置文件一并删除，如不需要删除配置文件，可执行sudo apt-get remove 包名） ，此处我要删除的是polipo ，那么在终端输入sudo apt-get –purge remove polipo，按下回车，输入密码，再次回车。 </p><p> 4.执行过程中，会提示你是否真的要删除（继续执行删除命令），在终端输入<code>y</code> ，然后回车，删除程序继续执行。  </p><p> 5.正常情况下，再次出现输入命令行删除成功。</p><h4 id="4-卸载源代码编译的的软件："><a href="#4-卸载源代码编译的的软件：" class="headerlink" title="4.卸载源代码编译的的软件："></a>4.卸载源代码编译的的软件：</h4><p>cd 源代码目录<br>make clean<br>./configure<br>（make）<br>make uninstall<br>rm -rf 目录</p><h4 id="5-清理系统："><a href="#5-清理系统：" class="headerlink" title="5.清理系统："></a>5.<strong>清理系统：</strong></h4><p>sudo apt-get autoclean<br>sudo apt-get clean<br>sudo apt-get autoremove<br>（或使用ubuntu-tweak清理）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-使用Synaptic软件包管理器进行卸载&quot;&gt;&lt;a href=&quot;#1-使用Synaptic软件包管理器进行卸载&quot; class=&quot;headerlink&quot; title=&quot;1.使用Synaptic软件包管理器进行卸载&quot;&gt;&lt;/a&gt;1.使用Synaptic软件包管理器进行
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用文字替换网页链接</title>
    <link href="http://yoursite.com/2019/11/15/%E7%94%A8%E6%96%87%E5%AD%97%E6%9B%BF%E6%8D%A2%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/11/15/用文字替换网页链接/</id>
    <published>2019-11-15T10:58:26.000Z</published>
    <updated>2019-11-15T11:01:18.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站"><a href="#怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站" class="headerlink" title="怎么把一个网址链接转换成文字的形式， 就是点一下那段文字就进入该网站"></a>怎么把一个网址链接转换成文字的形式， 就是点一下那段文字就进入该网站</h3><p>何把一个网址链接转换成文字的形式，点击一下那个文字，就可以进入该网站了？</p><p>我今天上午试做了，现在跟有需求但不会操作的朋友们分享一下：<br>我是在MarkDown编辑器上完成的，先打开MarkDown编辑器，然后按照下面的程序编写就是了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a  href =&quot;完整的地址链接&quot;&gt;代替的文字 &lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站&quot;&gt;&lt;a href=&quot;#怎么把一个网址链接转换成文字的形式，-就是点一下那段文字就进入该网站&quot; class=&quot;headerlink&quot; title=&quot;怎么把一个网址链接转换成文字的形式， 就是点一下
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装程序的三种方法</title>
    <link href="http://yoursite.com/2019/11/15/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/15/Ubuntu下安装程序的三种方法/</id>
    <published>2019-11-15T09:48:06.000Z</published>
    <updated>2019-11-16T02:55:57.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UBUNTU下安装程序的三种方法"><a href="#UBUNTU下安装程序的三种方法" class="headerlink" title="UBUNTU下安装程序的三种方法"></a>UBUNTU下安装程序的三种方法</h3><p>在ubuntu当中，安装应用程序我所知道的有三种方法，分别是apt-get，dpkg安装deb和make install安装源码包三种。下面针对每一种方法各举例来说明。</p><h4 id="1-apt-get方法"><a href="#1-apt-get方法" class="headerlink" title="(1)apt-get方法"></a>(1)apt-get方法</h4><p>使用apt-get install来安装应用程序算是最常见的一种安装方法了，比如我要安装build-essential这个软件，使用以下，他会帮我把所有的依赖包都一起安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install 软件名</span><br></pre></td></tr></table></figure><p>执行上述命令以后，我们可以看到一下信息，The following extra packages will be installed:表示所有需要再安装的依赖包。</p><p>下面给出apt-get的的各种参数：</p><p>apt-get install xxx 安装xxx  。如果带有参数，那么-d 表示仅下载 ，-f 表示强制安装<br>apt-get remove xxx 卸载xxx<br>apt-get update 更新软件信息数据库<br>apt-get upgrade 进行系统升级<br>apt-cache search 搜索软件包<br>Tips：建议您经常使用“apt-get update”命令来更新您的软件信息数据库 </p><p>apt-get理论上是要求能够联网，但是如果制作了本地源，就不需要联网，制作本地源可以参考：<a href="http://www.cnblogs.com/xwdreamer/p/3875857.html" target="_blank" rel="noopener">ubuntu制作本地源</a></p><h4 id="2-dpkg安装deb包"><a href="#2-dpkg安装deb包" class="headerlink" title="(2)dpkg安装deb包"></a>(2)dpkg安装deb包</h4><p>Ubuntu软件包格式为deb，安装方法如下：</p><p>  sudo dpkg -i package.deb</p><p>dpkg的详细使用方法，网上有很多，下面简单列了几个：</p><p>dpkg -i package.deb安装包</p><p>dpkg -r package删除包</p><p>dpkg -P package删除包（包括配置文件）</p><p>dpkg -L package列出与该包关联的文件</p><p>dpkg -l package显示该包的版本</p><p>dpkg –unpack package.deb解开 deb 包的内容</p><p>dpkg -S keyword搜索所属的包内容</p><p>dpkg -l列出当前已安装的包</p><p>dpkg -c package.deb列出 deb 包的内容</p><p>dpkg –configure package配置包</p><h4 id="make-install源代码安装"><a href="#make-install源代码安装" class="headerlink" title="make install源代码安装"></a>make install源代码安装</h4><p>如果要使用make安装的话，那么必须得安装build-essential这个依赖包，安装方法已经在前面说过了。在安装完毕以后，我们就可以进行源码安装。源码安装大致可以分为三步骤：（./configure）–＞ 编译（sudo make） –＞ 安装（sudo make install）。</p><ol><li>配置：这是编译源代码的第一步，通过 <code>./configure</code> 命令完成。执行此步以便为编译源代码作准备。常用的选项有 <code>--</code>prefix=PREFIX，用以指定程序的安装位置。更多的选项可通过 <code>--</code>help 查询。也有某些程序无需执行此步。</li><li>编译：一旦配置通过，可即刻使用 <code>make</code> 指令来执行源代码的编译过程。视软件的具体情况而定，编译所需的时间也各有差异，我们所要做的就是耐心等候和静观其变。此步虽然仅下简单的指令，但有时候所遇到的问题却十分复杂。较常碰到的情形是程序编译到中途却无法圆满结束。此时，需要根据出错提示分析以便找到应对之策。</li><li>安装：如果编译没有问题，那么执行 <code>sudo make install</code> 就可以将程序安装到系统中了。</li></ol><p>下面以安装nagios为例进行说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1.解压缩</span><br><span class="line">tar -zxf nagios-4.0.2.tar.gz  </span><br><span class="line">//2.进入目录</span><br><span class="line">cd nagios-4.0.2</span><br><span class="line">//3.配置</span><br><span class="line">./configure --prefix=/usr/local/nagios     </span><br><span class="line">//4.编译</span><br><span class="line">make all</span><br><span class="line">//5.安装</span><br><span class="line">make install &amp;&amp; make install-init &amp;&amp; make install-commandmode &amp;&amp; make install-config</span><br></pre></td></tr></table></figure><h3 id="ubuntu制作本地源"><a href="#ubuntu制作本地源" class="headerlink" title="ubuntu制作本地源"></a>ubuntu制作本地源</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>平时apt-get install安装软件时，下载的deb文件都会存放在/var/cache/apt/archives/下，为了今后重装或给别人用，特别是没有网络时，这些deb文件实际上是可以派上用途的，也就是可以用这些deb制作成本地源。这种方法还有一个应用场景：</p><ol><li>先在有网络的服务器上面进行apt-get install安装</li><li>然后制作本地源</li><li>将本地源拷贝到没有网络的服务器上，然后在那台机器上设定sourcelist指向这个本地源，此时在那台没有网络的服务器上也可以执行apt-get install安装了。</li></ol><p>下面给出可行且实用的部分本地源制作步骤：</p><p>一、在自己的根目录下建立一个目录，用于放所有下载的软件包，目录名随自己喜欢,建议新手在自己的根目录下进行以下操作，以避免操作权限问题的困扰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/ packs</span><br></pre></td></tr></table></figure><p>拷贝过来发现在packs当中为文件都是root账户的，需要修改</p><p>修改所有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R enadmin.enadmin *</span><br></pre></td></tr></table></figure><p> 修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod ug+rw,o+r *</span><br></pre></td></tr></table></figure><p>二、复制文件到packs文件夹下，目录依各人情况变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /var/cache/apt/archives/* ~/packs -r</span><br></pre></td></tr></table></figure><p>三、建立Packages.gz包，里面记录了packs文件夹下面的软件包信息，包括依赖信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-scanpackages packs /dev/null |gzip &gt; packs/Packages.gz -r</span><br></pre></td></tr></table></figure><p> 完成此操作后，将packs文件夹复制到一个不常格式化的分区中，作为长久使用，比如我将它放在一个fat32的分区时面，路径是 /media/packs</p><p>四、加本地源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb file:///media/ packs/</span><br></pre></td></tr></table></figure><p>注意packs后面有一个斜杠，前面还要有空格</p><p>五、更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UBUNTU下安装程序的三种方法&quot;&gt;&lt;a href=&quot;#UBUNTU下安装程序的三种方法&quot; class=&quot;headerlink&quot; title=&quot;UBUNTU下安装程序的三种方法&quot;&gt;&lt;/a&gt;UBUNTU下安装程序的三种方法&lt;/h3&gt;&lt;p&gt;在ubuntu当中，安装应用
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配</title>
    <link href="http://yoursite.com/2019/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2019/11/12/字符串匹配/</id>
    <published>2019-11-12T06:01:58.000Z</published>
    <updated>2019-11-25T12:53:38.862Z</updated>
    
    <content type="html"><![CDATA[<p>字符串匹配</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符串匹配&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://yoursite.com/2019/11/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/12/线段树/</id>
    <published>2019-11-12T06:01:46.000Z</published>
    <updated>2019-11-25T11:59:41.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><a href="javascript:;">编辑</a></p><p>线段树是一种<a href="https://baike.baidu.com/item/二叉搜索树" target="_blank" rel="noopener">二叉搜索树</a>，与<a href="https://baike.baidu.com/item/区间树" target="_blank" rel="noopener">区间树</a>相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。[1] </p><p>对于线段树中的每一个非<a href="https://baike.baidu.com/item/叶子节点" target="_blank" rel="noopener">叶子节点</a>[a,b]，它的左儿子表示的区间为[a,(a+b)/2]，右儿子表示的区间为[(a+b)/2+1,b]。因此线段树是<a href="https://baike.baidu.com/item/平衡二叉树" target="_blank" rel="noopener">平衡二叉树</a>，最后的子节点数目为N，即整个线段区间的长度。</p><p>使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，<a href="https://baike.baidu.com/item/时间复杂度" target="_blank" rel="noopener">时间复杂度</a>为O(logN）。而未优化的<a href="https://baike.baidu.com/item/空间复杂度" target="_blank" rel="noopener">空间复杂度</a>为2N，因此有时需要离散化让空间压缩。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><a href="javascript:;">编辑</a></p><p>线段树是建立在<a href="https://baike.baidu.com/item/线段" target="_blank" rel="noopener">线段</a>的基础上，每个结点都代表了一条线段[a,b]。长度为1的线段称为元线段。非元线段都有两个子结点，左结点代表的线段为[a,(a + b) / 2]，右结点代表的线段为[((a + b) / 2）+1,b]。</p><p>下图就是两棵长度范围为[1,5][1,10]的线段树。</p><p>长度范围为[1,L] 的一棵线段树的深度为log (L) + 1。这个显然，而且存储一棵线段树的空间复杂度为O(L）。</p><p>线段树支持最基本的操作为插入和删除一条线段。下面以插入为例，详细叙述，删除类似。</p><p>将一条线段[a,b] 插入到代表线段[l,r]的结点p中，如果p不是元线段，那么令mid=（l+r）/2。如果b&lt;mid，那么将线段[a,b] 也插入到p的左儿子结点中，如果a&gt;mid，那么将线段[a,b] 也插入到p的右儿子结点中。</p><p>插入（删除）操作的时间复杂度为O（logn）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;javascript:;&quot;&gt;编辑&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线段树是一种&lt;a href=&quot;https://baike.baid
      
    
    </summary>
    
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>数论</title>
    <link href="http://yoursite.com/2019/11/12/%E6%95%B0%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/11/12/数论/</id>
    <published>2019-11-12T06:00:26.000Z</published>
    <updated>2019-11-26T02:16:23.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="（数学分支）"><a href="#（数学分支）" class="headerlink" title="（数学分支）"></a>（数学分支）</h2><p>数论是<a href="https://baike.baidu.com/item/纯粹数学" target="_blank" rel="noopener">纯粹数学</a>的分支之一，主要研究<a href="https://baike.baidu.com/item/整数" target="_blank" rel="noopener">整数</a>的性质。整数可以是方程式的解（<a href="https://baike.baidu.com/item/丢番图方程/5466939" target="_blank" rel="noopener">丢番图方程</a>）。有些<a href="https://baike.baidu.com/item/解析函数/2281833" target="_blank" rel="noopener">解析函数</a>（像<a href="https://baike.baidu.com/item/黎曼ζ函数" target="_blank" rel="noopener">黎曼ζ函数</a>）中包括了一些整数、质数的性质，透过这些函数也可以了解一些数论的问题。透过数论也可以建立实数和有理数之间的关系，并且用有理数来逼近实数（<a href="https://baike.baidu.com/item/丢番图逼近/10724965" target="_blank" rel="noopener">丢番图逼近</a>）。</p><p>按研究方法来看，数论大致可分为<a href="https://baike.baidu.com/item/初等数论/2375326" target="_blank" rel="noopener">初等数论</a>和高等数论。初等数论是用初等方法研究的数论，它的研究方法本质上说，就是利用整数环的整除性质，主要包括整除理论、<a href="https://baike.baidu.com/item/同余" target="_blank" rel="noopener">同余</a>理论、<a href="https://baike.baidu.com/item/连分数/2715871" target="_blank" rel="noopener">连分数</a>理论。高等数论则包括了更为深刻的数学研究工具。它大致包括<a href="https://baike.baidu.com/item/代数数论/5919796" target="_blank" rel="noopener">代数数论</a>、<a href="https://baike.baidu.com/item/解析数论/2281979" target="_blank" rel="noopener">解析数论</a>、<a href="https://baike.baidu.com/item/计算数论" target="_blank" rel="noopener">计算数论</a>等等。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>数学理论或在较旧的使用中，叫做算术，是专门研究整数的纯数学的分支。它有时被称为“数学女王”，因为它在原理中的基础地位。数理论家研究质数以及由整数（例如有理数字）制成的对象的属性或定义为整数的概括（例如，代数整数）。</p><p>整数可以自己考虑或作为方程（Diophantine几何）的解决方案。通过研究以某种方式（分析数论）编码整数，素数或其他数论理论对象的分析对象（如Riemann zeta函数），通常最好地理解数论中的问题。人们还可以研究与有理数相关的实数，例如，由后者近似（Diophantine近似）。</p><p>数理论的较旧术语是算术。到二十世纪初，它被“数学理论”所取代（“算术”一词被普通大众用来表示“基本计算”，也在数学逻辑中获得了其他含义，如在数学理论中使用术语算术在二十世纪下半叶重新获得了一些地位，这可能部分是由于法国的影响力，特别是作为数理论的形容词，优选算术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数论&quot;&gt;&lt;a href=&quot;#数论&quot; class=&quot;headerlink&quot; title=&quot;数论&quot;&gt;&lt;/a&gt;数论&lt;/h1&gt;&lt;h2 id=&quot;（数学分支）&quot;&gt;&lt;a href=&quot;#（数学分支）&quot; class=&quot;headerlink&quot; title=&quot;（数学分支）&quot;&gt;&lt;/a&gt;（
      
    
    </summary>
    
    
    
      <category term="acm" scheme="http://yoursite.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="http://yoursite.com/2019/11/12/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/11/12/拓扑排序/</id>
    <published>2019-11-12T06:00:13.000Z</published>
    <updated>2019-11-12T06:00:13.893Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://yoursite.com/2019/11/12/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/11/12/并查集/</id>
    <published>2019-11-12T05:58:56.000Z</published>
    <updated>2019-11-12T05:58:56.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>单源最短路径问题</title>
    <link href="http://yoursite.com/2019/11/12/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/12/单源最短路径问题/</id>
    <published>2019-11-12T05:58:37.000Z</published>
    <updated>2019-11-12T05:58:37.936Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
